
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import main.TablaSimbolos;
import main.Variable;
import main.Arreglos;
import main.TablaArreglos;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import vista.Principal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\015\000" +
    "\002\007\003\000\002\007\003\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\006\016\000\002\014\005\000\002\014\004\000\002\013" +
    "\003\000\002\013\005\000\002\015\012\000\002\016\003" +
    "\000\002\016\005\000\002\017\015\000\002\020\003\000" +
    "\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\005\004\001\002\000\010\007\014\022" +
    "\007\042\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\004\014\164\001\002\000\012\006" +
    "\uffff\007\uffff\022\uffff\042\uffff\001\002\000\012\006\ufffc" +
    "\007\ufffc\022\ufffc\042\ufffc\001\002\000\012\006\ufffa\007" +
    "\ufffa\022\ufffa\042\ufffa\001\002\000\012\006\ufffb\007\ufffb" +
    "\022\ufffb\042\ufffb\001\002\000\004\014\150\001\002\000" +
    "\012\006\ufffd\007\ufffd\022\ufffd\042\ufffd\001\002\000\004" +
    "\014\023\001\002\000\012\006\021\007\014\022\007\042" +
    "\016\001\002\000\012\006\ufffe\007\ufffe\022\ufffe\042\ufffe" +
    "\001\002\000\004\005\022\001\002\000\004\002\001\001" +
    "\002\000\004\014\024\001\002\000\006\043\025\045\026" +
    "\001\002\000\004\044\141\001\002\000\004\044\027\001" +
    "\002\000\006\020\032\021\030\001\002\000\004\017\uffde" +
    "\001\002\000\004\017\033\001\002\000\004\017\uffdf\001" +
    "\002\000\004\046\034\001\002\000\006\010\037\023\036" +
    "\001\002\000\004\006\137\001\002\000\004\021\136\001" +
    "\002\000\036\004\042\020\040\021\057\025\043\026\044" +
    "\027\047\030\052\031\046\034\054\035\041\036\051\037" +
    "\050\040\045\041\056\001\002\000\012\006\uffef\011\uffef" +
    "\024\uffef\033\uffef\001\002\000\004\032\133\001\002\000" +
    "\012\006\ufff1\011\ufff1\024\ufff1\033\ufff1\001\002\000\004" +
    "\032\126\001\002\000\004\032\121\001\002\000\004\032" +
    "\116\001\002\000\004\032\111\001\002\000\004\032\104" +
    "\001\002\000\004\032\101\001\002\000\004\032\076\001" +
    "\002\000\004\032\071\001\002\000\006\011\uffe5\024\uffe5" +
    "\001\002\000\004\032\066\001\002\000\006\011\064\024" +
    "\063\001\002\000\004\032\060\001\002\000\012\006\ufff0" +
    "\011\ufff0\024\ufff0\033\ufff0\001\002\000\006\010\037\023" +
    "\036\001\002\000\004\033\062\001\002\000\012\006\uffe9" +
    "\011\uffe9\024\uffe9\033\uffe9\001\002\000\036\004\042\020" +
    "\040\021\057\025\043\026\044\027\047\030\052\031\046" +
    "\034\054\035\041\036\051\037\050\040\045\041\056\001" +
    "\002\000\006\006\uffe7\033\uffe7\001\002\000\006\011\uffe4" +
    "\024\uffe4\001\002\000\006\010\037\023\036\001\002\000" +
    "\004\033\070\001\002\000\012\006\uffee\011\uffee\024\uffee" +
    "\033\uffee\001\002\000\036\004\042\020\040\021\057\025" +
    "\043\026\044\027\047\030\052\031\046\034\054\035\041" +
    "\036\051\037\050\040\045\041\056\001\002\000\004\024" +
    "\073\001\002\000\036\004\042\020\040\021\057\025\043" +
    "\026\044\027\047\030\052\031\046\034\054\035\041\036" +
    "\051\037\050\040\045\041\056\001\002\000\004\033\075" +
    "\001\002\000\012\006\ufff3\011\ufff3\024\ufff3\033\ufff3\001" +
    "\002\000\006\010\037\023\036\001\002\000\004\033\100" +
    "\001\002\000\012\006\uffec\011\uffec\024\uffec\033\uffec\001" +
    "\002\000\006\010\037\023\036\001\002\000\004\033\103" +
    "\001\002\000\012\006\uffeb\011\uffeb\024\uffeb\033\uffeb\001" +
    "\002\000\036\004\042\020\040\021\057\025\043\026\044" +
    "\027\047\030\052\031\046\034\054\035\041\036\051\037" +
    "\050\040\045\041\056\001\002\000\004\024\106\001\002" +
    "\000\036\004\042\020\040\021\057\025\043\026\044\027" +
    "\047\030\052\031\046\034\054\035\041\036\051\037\050" +
    "\040\045\041\056\001\002\000\004\033\110\001\002\000" +
    "\012\006\ufff4\011\ufff4\024\ufff4\033\ufff4\001\002\000\036" +
    "\004\042\020\040\021\057\025\043\026\044\027\047\030" +
    "\052\031\046\034\054\035\041\036\051\037\050\040\045" +
    "\041\056\001\002\000\004\024\113\001\002\000\036\004" +
    "\042\020\040\021\057\025\043\026\044\027\047\030\052" +
    "\031\046\034\054\035\041\036\051\037\050\040\045\041" +
    "\056\001\002\000\004\033\115\001\002\000\012\006\ufff2" +
    "\011\ufff2\024\ufff2\033\ufff2\001\002\000\006\010\037\023" +
    "\036\001\002\000\004\033\120\001\002\000\012\006\uffea" +
    "\011\uffea\024\uffea\033\uffea\001\002\000\036\004\042\020" +
    "\040\021\057\025\043\026\044\027\047\030\052\031\046" +
    "\034\054\035\041\036\051\037\050\040\045\041\056\001" +
    "\002\000\004\024\123\001\002\000\036\004\042\020\040" +
    "\021\057\025\043\026\044\027\047\030\052\031\046\034" +
    "\054\035\041\036\051\037\050\040\045\041\056\001\002" +
    "\000\004\033\125\001\002\000\012\006\ufff5\011\ufff5\024" +
    "\ufff5\033\ufff5\001\002\000\036\004\042\020\040\021\057" +
    "\025\043\026\044\027\047\030\052\031\046\034\054\035" +
    "\041\036\051\037\050\040\045\041\056\001\002\000\004" +
    "\024\130\001\002\000\036\004\042\020\040\021\057\025" +
    "\043\026\044\027\047\030\052\031\046\034\054\035\041" +
    "\036\051\037\050\040\045\041\056\001\002\000\004\033" +
    "\132\001\002\000\012\006\ufff6\011\ufff6\024\ufff6\033\ufff6" +
    "\001\002\000\006\010\037\023\036\001\002\000\004\033" +
    "\135\001\002\000\012\006\uffed\011\uffed\024\uffed\033\uffed" +
    "\001\002\000\006\006\uffe6\033\uffe6\001\002\000\004\015" +
    "\140\001\002\000\012\006\uffe0\007\uffe0\022\uffe0\042\uffe0" +
    "\001\002\000\036\004\042\020\040\021\057\025\043\026" +
    "\044\027\047\030\052\031\046\034\054\035\041\036\051" +
    "\037\050\040\045\041\056\001\002\000\006\006\uffe2\024" +
    "\uffe2\001\002\000\006\006\145\024\144\001\002\000\036" +
    "\004\042\020\040\021\057\025\043\026\044\027\047\030" +
    "\052\031\046\034\054\035\041\036\051\037\050\040\045" +
    "\041\056\001\002\000\004\015\146\001\002\000\012\006" +
    "\uffe3\007\uffe3\022\uffe3\042\uffe3\001\002\000\006\006\uffe1" +
    "\024\uffe1\001\002\000\006\012\151\013\153\001\002\000" +
    "\004\014\ufff8\001\002\000\004\014\154\001\002\000\004" +
    "\014\ufff7\001\002\000\004\014\155\001\002\000\004\021" +
    "\156\001\002\000\004\016\157\001\002\000\004\017\160" +
    "\001\002\000\036\004\042\020\040\021\057\025\043\026" +
    "\044\027\047\030\052\031\046\034\054\035\041\036\051" +
    "\037\050\040\045\041\056\001\002\000\004\006\162\001" +
    "\002\000\004\015\163\001\002\000\012\006\ufff9\007\ufff9" +
    "\022\ufff9\042\ufff9\001\002\000\006\012\151\013\153\001" +
    "\002\000\004\014\166\001\002\000\004\014\167\001\002" +
    "\000\004\023\170\001\002\000\004\021\171\001\002\000" +
    "\004\016\172\001\002\000\004\017\173\001\002\000\006" +
    "\010\037\023\036\001\002\000\004\006\175\001\002\000" +
    "\004\015\176\001\002\000\012\006\uffe8\007\uffe8\022\uffe8" +
    "\042\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\004\001\001\000\016\003\016\004" +
    "\007\005\014\006\010\015\012\017\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\017\005\014\006\010\015\012\017\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\052\013\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\071" +
    "\001\001\000\002\001\001\000\004\011\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\104" +
    "\001\001\000\002\001\001\000\004\011\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\111\001\001" +
    "\000\002\001\001\000\004\011\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\121\001\001\000" +
    "\002\001\001\000\004\011\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\126\001\001\000\002\001" +
    "\001\000\004\011\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\141\016\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    TablaArreglos tablaArreglos = new TablaArreglos();

    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }

    public void imprimirVariables() {
        System.out.println("Variables reconocidas:");
        for (Variable variable : tablaSimbolos.obtenerVariables()) {
            System.out.println(variable.toString());
        }
    }

    public void imprimirArreglos() {
        System.out.println("Arreglos reconocidos:");
        for (Arreglos arreglo : tablaArreglos.obtenerArreglos()) {
            System.out.println(arreglo.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PROGRAM codigo END PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= imprimir_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= VAR DOS_PUNTOS tipo_variable DOS_PUNTOS DOS_PUNTOS IDENTIFICADOR MENOR GUION operacion END PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    
    String tipo_variable =String.valueOf(a);
    String nombre = String.valueOf(b);
    nombre = nombre.toLowerCase();
    String valor = String.valueOf(c);
    

    System.out.println("Declaración de variable: "+tipo_variable+" "+nombre+" = "+valor);

    //Si C es un identificador, se busca en la tabla de simbolos
    //Si es decimal solo seran numeros, si es una cadena contendrá comillas
    //Si es un identificador puede tener letras y numeros pero no comillas
    tablaSimbolos.agregarVariable(new Variable(tipo_variable, nombre, valor));
    


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_variable ::= DOUBLE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_variable ::= CHAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= SUM PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) + Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion ::= RES PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) - Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacion ::= MULT PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) * Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacion ::= DIV PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) / Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacion ::= MOD PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) % Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Variable variable = tablaSimbolos.obtenerVariable(id.toString().toLowerCase());
                    if (variable != null) {
                        RESULT = variable.getValor();
                    } else {
                        System.out.println("Error semántico: La variable "+id+" no ha sido declarada");
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= MEDIA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    double suma = 0;
                    for(Object valor : arrayList){
                        suma += Double.parseDouble(valor.toString());
                    }
                    RESULT = suma / arrayList.size();

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= MEDIANA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    //ordenamos el arreglo de menor a mayor
                    //Parseamos los valores a double
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));

                    }

                    Collections.sort(valores);

                    int n = valores.size();

                    if (n % 2 == 0) {
                        RESULT = (valores.get((n-1)/2) + valores.get(n/2)) / 2;
                    } else {
                        RESULT = valores.get(n/2);
                    }


                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= MODA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    Map<Double, Integer> frecuencias = new HashMap<>();

                    for (Double valor : valores){
                        frecuencias.put(valor, frecuencias.getOrDefault(valor, 0) + 1);
                    }

                    double moda = 0;

                    int max = 0;

                    for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                        if (entry.getValue() > max){
                            moda = entry.getKey();
                            max = entry.getValue();
                        }
                    }

                    RESULT = moda;

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= VARIANZA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    //Calculamos la media
                    double suma = 0;
                    for(Double valor : valores){
                        suma += valor;
                    }
                    double media = suma / valores.size();

                    //calculamos la varianza
                    double varianza = 0;
                    for(Double valor : valores){
                        varianza += Math.pow(valor - media, 2);
                    }
                    varianza = varianza / valores.size();

                    RESULT = varianza;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= MAX PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.max(valores);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= MIN PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.min(valores);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arreglo ::= ARR DOS_PUNTOS tipo_variable DOS_PUNTOS DOS_PUNTOS ARROBA IDENTIFICADOR MENOR GUION valores_arreglo_org END PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

    String tipo_variable = String.valueOf(a);
    String nombre = String.valueOf(b).toLowerCase();

    Arreglos arreglo = new Arreglos(tipo_variable, nombre);

    ArrayList<Object> arrayList = (ArrayList<Object>) c;

    for(Object valor : arrayList){
        arreglo.agregarValor(valor);
    }

    tablaArreglos.agregarArreglo(arreglo);


    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valores_arreglo_org ::= CORCHETE_IZQ valores_arreglo CORCHETE_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo_org",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valores_arreglo_org ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    
                    Arreglos arreglo = tablaArreglos.obtenerArreglo(v.toString().toLowerCase());
                    if (arreglo != null) {
                        RESULT = arreglo.obtenerValores();
                    } else {
                        System.out.println("Error semántico: El arreglo "+v+" no ha sido declarado");
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo_org",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores_arreglo ::= operacion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        ((ArrayList<Object>) RESULT).add(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valores_arreglo ::= valores_arreglo COMA operacion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((ArrayList<Object>) lista).add(v); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // imprimir ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL lista_impresion END PUNTO_COMA 
            {
              Object RESULT =null;
		Principal.txtConsola.append("\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_impresion ::= operacion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Principal.txtConsola.append(v.toString()+", ");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_impresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_impresion ::= lista_impresion COMA operacion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Principal.txtConsola.append(v.toString()+", ");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_impresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imprimir_arreglo ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL titulo_impresion GUION MAYOR valores_arreglo_org END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        String titulo = String.valueOf(t);
                        ArrayList<Object> valores = (ArrayList<Object>) d;

                        Principal.txtConsola.append("\n--------------------\n"+titulo+"\n--------------------\n");
                        for(Object valor : valores){
                            Principal.txtConsola.append(valor.toString()+"\n");
                        }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // titulo_impresion ::= CADENA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_impresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // titulo_impresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Variable variable = tablaSimbolos.obtenerVariable(t.toString().toLowerCase());
                        if (variable != null) {
                            RESULT = variable.getValor();
                        } else {
                            System.out.println("Error semántico: La variable "+t+" no ha sido declarada");
                        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_impresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
