
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import main.TablaSimbolos;
import main.Variable;
import main.Arreglos;
import main.TablaArreglos;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import vista.Principal;
import org.jfree.chart.*;
import org.jfree.data.general.*;
import javax.swing.*;
import vista.Grafica;
import main.ErroresSintacticos;
import org.jfree.data.category.DefaultCategoryDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\006\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\015\000\002\007\003\000\002\007\003\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\006\016\000\002\014\005\000\002\014\004" +
    "\000\002\013\003\000\002\013\005\000\002\015\012\000" +
    "\002\016\003\000\002\016\005\000\002\017\015\000\002" +
    "\020\003\000\002\020\003\000\002\021\014\000\002\025" +
    "\003\000\002\025\004\000\002\022\012\000\002\022\012" +
    "\000\002\022\012\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\026\014\000\002\030\003\000\002" +
    "\030\004\000\002\027\012\000\002\027\012\000\002\027" +
    "\012\000\002\027\012\000\002\027\012\000\002\031\014" +
    "\000\002\033\003\000\002\033\004\000\002\032\012\000" +
    "\002\032\012\000\002\032\012\000\002\032\012\000\002" +
    "\032\012\000\002\034\014\000\002\036\003\000\002\036" +
    "\004\000\002\035\012\000\002\035\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\004\005\004\001\002\000\020\007\021\022" +
    "\007\042\025\047\011\056\027\061\015\062\017\001\002" +
    "\000\004\002\006\001\002\000\004\002\000\001\002\000" +
    "\004\014\u0123\001\002\000\022\006\ufff8\007\ufff8\022\ufff8" +
    "\042\ufff8\047\ufff8\056\ufff8\061\ufff8\062\ufff8\001\002\000" +
    "\004\032\360\001\002\000\022\006\uffff\007\uffff\022\uffff" +
    "\042\uffff\047\uffff\056\uffff\061\uffff\062\uffff\001\002\000" +
    "\022\006\ufff6\007\ufff6\022\ufff6\042\ufff6\047\ufff6\056\ufff6" +
    "\061\ufff6\062\ufff6\001\002\000\022\006\ufffc\007\ufffc\022" +
    "\ufffc\042\ufffc\047\ufffc\056\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\032\275\001\002\000\022\006\ufffa\007\ufffa\022" +
    "\ufffa\042\ufffa\047\ufffa\056\ufffa\061\ufffa\062\ufffa\001\002" +
    "\000\004\032\242\001\002\000\022\006\ufffb\007\ufffb\022" +
    "\ufffb\042\ufffb\047\ufffb\056\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\004\014\226\001\002\000\022\006\ufff9\007\ufff9\022" +
    "\ufff9\042\ufff9\047\ufff9\056\ufff9\061\ufff9\062\ufff9\001\002" +
    "\000\022\006\ufffd\007\ufffd\022\ufffd\042\ufffd\047\ufffd\056" +
    "\ufffd\061\ufffd\062\ufffd\001\002\000\022\006\ufff7\007\ufff7" +
    "\022\ufff7\042\ufff7\047\ufff7\056\ufff7\061\ufff7\062\ufff7\001" +
    "\002\000\004\014\202\001\002\000\022\006\200\007\021" +
    "\022\007\042\025\047\011\056\027\061\015\062\017\001" +
    "\002\000\004\032\030\001\002\000\010\050\032\057\033" +
    "\060\031\001\002\000\004\014\170\001\002\000\004\014" +
    "\157\001\002\000\004\014\046\001\002\000\012\050\uffd8" +
    "\055\uffd8\057\uffd8\060\uffd8\001\002\000\012\050\032\055" +
    "\037\057\033\060\031\001\002\000\012\050\uffd7\055\uffd7" +
    "\057\uffd7\060\uffd7\001\002\000\004\056\040\001\002\000" +
    "\004\006\041\001\002\000\004\015\042\001\002\000\004" +
    "\033\043\001\002\000\004\006\044\001\002\000\004\015" +
    "\045\001\002\000\022\006\uffd9\007\uffd9\022\uffd9\042\uffd9" +
    "\047\uffd9\056\uffd9\061\uffd9\062\uffd9\001\002\000\004\014" +
    "\047\001\002\000\004\013\050\001\002\000\004\044\051" +
    "\001\002\000\006\010\055\023\054\001\002\000\004\006" +
    "\155\001\002\000\004\006\uffd3\001\002\000\004\021\154" +
    "\001\002\000\036\004\060\020\057\021\074\025\061\026" +
    "\062\027\064\030\070\031\065\034\072\035\056\036\067" +
    "\037\066\040\063\041\075\001\002\000\004\032\151\001" +
    "\002\000\012\006\uffeb\011\uffeb\024\uffeb\033\uffeb\001\002" +
    "\000\012\006\uffed\011\uffed\024\uffed\033\uffed\001\002\000" +
    "\004\032\144\001\002\000\004\032\137\001\002\000\004" +
    "\032\134\001\002\000\004\032\127\001\002\000\004\032" +
    "\122\001\002\000\004\032\117\001\002\000\004\032\114" +
    "\001\002\000\004\032\107\001\002\000\006\011\uffe1\024" +
    "\uffe1\001\002\000\004\032\104\001\002\000\006\011\102" +
    "\024\101\001\002\000\012\006\uffec\011\uffec\024\uffec\033" +
    "\uffec\001\002\000\004\032\076\001\002\000\006\010\055" +
    "\023\054\001\002\000\004\033\100\001\002\000\012\006" +
    "\uffe5\011\uffe5\024\uffe5\033\uffe5\001\002\000\036\004\060" +
    "\020\057\021\074\025\061\026\062\027\064\030\070\031" +
    "\065\034\072\035\056\036\067\037\066\040\063\041\075" +
    "\001\002\000\006\006\uffe3\033\uffe3\001\002\000\006\011" +
    "\uffe0\024\uffe0\001\002\000\006\010\055\023\054\001\002" +
    "\000\004\033\106\001\002\000\012\006\uffea\011\uffea\024" +
    "\uffea\033\uffea\001\002\000\036\004\060\020\057\021\074" +
    "\025\061\026\062\027\064\030\070\031\065\034\072\035" +
    "\056\036\067\037\066\040\063\041\075\001\002\000\004" +
    "\024\111\001\002\000\036\004\060\020\057\021\074\025" +
    "\061\026\062\027\064\030\070\031\065\034\072\035\056" +
    "\036\067\037\066\040\063\041\075\001\002\000\004\033" +
    "\113\001\002\000\012\006\uffef\011\uffef\024\uffef\033\uffef" +
    "\001\002\000\006\010\055\023\054\001\002\000\004\033" +
    "\116\001\002\000\012\006\uffe8\011\uffe8\024\uffe8\033\uffe8" +
    "\001\002\000\006\010\055\023\054\001\002\000\004\033" +
    "\121\001\002\000\012\006\uffe7\011\uffe7\024\uffe7\033\uffe7" +
    "\001\002\000\036\004\060\020\057\021\074\025\061\026" +
    "\062\027\064\030\070\031\065\034\072\035\056\036\067" +
    "\037\066\040\063\041\075\001\002\000\004\024\124\001" +
    "\002\000\036\004\060\020\057\021\074\025\061\026\062" +
    "\027\064\030\070\031\065\034\072\035\056\036\067\037" +
    "\066\040\063\041\075\001\002\000\004\033\126\001\002" +
    "\000\012\006\uffee\011\uffee\024\uffee\033\uffee\001\002\000" +
    "\036\004\060\020\057\021\074\025\061\026\062\027\064" +
    "\030\070\031\065\034\072\035\056\036\067\037\066\040" +
    "\063\041\075\001\002\000\004\024\131\001\002\000\036" +
    "\004\060\020\057\021\074\025\061\026\062\027\064\030" +
    "\070\031\065\034\072\035\056\036\067\037\066\040\063" +
    "\041\075\001\002\000\004\033\133\001\002\000\012\006" +
    "\ufff0\011\ufff0\024\ufff0\033\ufff0\001\002\000\006\010\055" +
    "\023\054\001\002\000\004\033\136\001\002\000\012\006" +
    "\uffe6\011\uffe6\024\uffe6\033\uffe6\001\002\000\036\004\060" +
    "\020\057\021\074\025\061\026\062\027\064\030\070\031" +
    "\065\034\072\035\056\036\067\037\066\040\063\041\075" +
    "\001\002\000\004\024\141\001\002\000\036\004\060\020" +
    "\057\021\074\025\061\026\062\027\064\030\070\031\065" +
    "\034\072\035\056\036\067\037\066\040\063\041\075\001" +
    "\002\000\004\033\143\001\002\000\012\006\ufff1\011\ufff1" +
    "\024\ufff1\033\ufff1\001\002\000\036\004\060\020\057\021" +
    "\074\025\061\026\062\027\064\030\070\031\065\034\072" +
    "\035\056\036\067\037\066\040\063\041\075\001\002\000" +
    "\004\024\146\001\002\000\036\004\060\020\057\021\074" +
    "\025\061\026\062\027\064\030\070\031\065\034\072\035" +
    "\056\036\067\037\066\040\063\041\075\001\002\000\004" +
    "\033\150\001\002\000\012\006\ufff2\011\ufff2\024\ufff2\033" +
    "\ufff2\001\002\000\006\010\055\023\054\001\002\000\004" +
    "\033\153\001\002\000\012\006\uffe9\011\uffe9\024\uffe9\033" +
    "\uffe9\001\002\000\006\006\uffe2\033\uffe2\001\002\000\004" +
    "\015\156\001\002\000\012\050\uffd6\055\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\004\014\160\001\002\000\004\013\161" +
    "\001\002\000\004\044\162\001\002\000\006\020\165\021" +
    "\164\001\002\000\004\006\166\001\002\000\004\006\uffd1" +
    "\001\002\000\004\006\uffd2\001\002\000\004\015\167\001" +
    "\002\000\012\050\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002" +
    "\000\004\014\171\001\002\000\004\012\172\001\002\000" +
    "\004\044\173\001\002\000\006\010\055\023\054\001\002" +
    "\000\004\006\175\001\002\000\004\015\176\001\002\000" +
    "\012\050\uffd5\055\uffd5\057\uffd5\060\uffd5\001\002\000\022" +
    "\006\ufffe\007\ufffe\022\ufffe\042\ufffe\047\ufffe\056\ufffe\061" +
    "\ufffe\062\ufffe\001\002\000\004\005\201\001\002\000\004" +
    "\002\001\001\002\000\004\014\203\001\002\000\006\043" +
    "\204\045\205\001\002\000\004\044\217\001\002\000\004" +
    "\044\206\001\002\000\006\020\211\021\207\001\002\000" +
    "\006\006\uffda\017\uffda\001\002\000\004\017\212\001\002" +
    "\000\006\006\uffdb\017\uffdb\001\002\000\004\046\213\001" +
    "\002\000\006\010\055\023\054\001\002\000\004\006\215" +
    "\001\002\000\004\015\216\001\002\000\022\006\uffdc\007" +
    "\uffdc\022\uffdc\042\uffdc\047\uffdc\056\uffdc\061\uffdc\062\uffdc" +
    "\001\002\000\036\004\060\020\057\021\074\025\061\026" +
    "\062\027\064\030\070\031\065\034\072\035\056\036\067" +
    "\037\066\040\063\041\075\001\002\000\006\006\uffde\024" +
    "\uffde\001\002\000\006\006\223\024\222\001\002\000\036" +
    "\004\060\020\057\021\074\025\061\026\062\027\064\030" +
    "\070\031\065\034\072\035\056\036\067\037\066\040\063" +
    "\041\075\001\002\000\004\015\224\001\002\000\022\006" +
    "\uffdf\007\uffdf\022\uffdf\042\uffdf\047\uffdf\056\uffdf\061\uffdf" +
    "\062\uffdf\001\002\000\006\006\uffdd\024\uffdd\001\002\000" +
    "\006\012\227\013\230\001\002\000\004\014\ufff4\001\002" +
    "\000\004\014\ufff3\001\002\000\004\014\232\001\002\000" +
    "\004\014\233\001\002\000\004\021\234\001\002\000\004" +
    "\016\235\001\002\000\004\017\236\001\002\000\036\004" +
    "\060\020\057\021\074\025\061\026\062\027\064\030\070" +
    "\031\065\034\072\035\056\036\067\037\066\040\063\041" +
    "\075\001\002\000\004\006\240\001\002\000\004\015\241" +
    "\001\002\000\022\006\ufff5\007\ufff5\022\ufff5\042\ufff5\047" +
    "\ufff5\056\ufff5\061\ufff5\062\ufff5\001\002\000\006\050\245" +
    "\060\244\001\002\000\010\050\uffbf\055\uffbf\060\uffbf\001" +
    "\002\000\004\014\266\001\002\000\004\014\257\001\002" +
    "\000\010\050\245\055\250\060\244\001\002\000\010\050" +
    "\uffbe\055\uffbe\060\uffbe\001\002\000\004\062\251\001\002" +
    "\000\004\006\252\001\002\000\004\015\253\001\002\000" +
    "\004\033\254\001\002\000\004\006\255\001\002\000\004" +
    "\015\256\001\002\000\022\006\uffc0\007\uffc0\022\uffc0\042" +
    "\uffc0\047\uffc0\056\uffc0\061\uffc0\062\uffc0\001\002\000\004" +
    "\014\260\001\002\000\004\013\261\001\002\000\004\044" +
    "\262\001\002\000\006\020\211\021\207\001\002\000\004" +
    "\006\264\001\002\000\004\015\265\001\002\000\010\050" +
    "\uffbd\055\uffbd\060\uffbd\001\002\000\004\014\267\001\002" +
    "\000\004\012\270\001\002\000\004\044\271\001\002\000" +
    "\006\010\055\023\054\001\002\000\004\006\273\001\002" +
    "\000\004\015\274\001\002\000\010\050\uffbc\055\uffbc\060" +
    "\uffbc\001\002\000\014\050\277\051\303\052\302\053\301" +
    "\054\300\001\002\000\016\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\001\002\000\004\014\351\001\002" +
    "\000\004\014\342\001\002\000\004\014\333\001\002\000" +
    "\004\014\324\001\002\000\004\014\315\001\002\000\016" +
    "\050\277\051\303\052\302\053\301\054\300\055\306\001" +
    "\002\000\016\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\004\061\307\001\002\000\004\006" +
    "\310\001\002\000\004\015\311\001\002\000\004\033\312" +
    "\001\002\000\004\006\313\001\002\000\004\015\314\001" +
    "\002\000\022\006\uffc8\007\uffc8\022\uffc8\042\uffc8\047\uffc8" +
    "\056\uffc8\061\uffc8\062\uffc8\001\002\000\004\014\316\001" +
    "\002\000\004\013\317\001\002\000\004\044\320\001\002" +
    "\000\006\010\055\023\054\001\002\000\004\006\322\001" +
    "\002\000\004\015\323\001\002\000\016\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\001\002\000\004\014" +
    "\325\001\002\000\004\012\326\001\002\000\004\044\327" +
    "\001\002\000\006\010\055\023\054\001\002\000\004\006" +
    "\331\001\002\000\004\015\332\001\002\000\016\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\004\014\334\001\002\000\004\013\335\001\002\000\004" +
    "\044\336\001\002\000\006\020\165\021\164\001\002\000" +
    "\004\006\340\001\002\000\004\015\341\001\002\000\016" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001" +
    "\002\000\004\014\343\001\002\000\004\013\344\001\002" +
    "\000\004\044\345\001\002\000\006\020\165\021\164\001" +
    "\002\000\004\006\347\001\002\000\004\015\350\001\002" +
    "\000\016\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\001\002\000\004\014\352\001\002\000\004\013\353" +
    "\001\002\000\004\044\354\001\002\000\006\020\165\021" +
    "\164\001\002\000\004\006\356\001\002\000\004\015\357" +
    "\001\002\000\016\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\001\002\000\014\050\361\051\367\052\365" +
    "\053\363\054\362\001\002\000\004\014\u011c\001\002\000" +
    "\004\014\u0115\001\002\000\004\014\u010e\001\002\000\016" +
    "\050\361\051\367\052\365\053\363\054\362\055\u0106\001" +
    "\002\000\004\014\377\001\002\000\016\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\004\014" +
    "\370\001\002\000\004\014\371\001\002\000\004\013\372" +
    "\001\002\000\004\044\373\001\002\000\006\010\055\023" +
    "\054\001\002\000\004\006\375\001\002\000\004\015\376" +
    "\001\002\000\016\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\001\002\000\004\014\u0100\001\002\000\004" +
    "\012\u0101\001\002\000\004\044\u0102\001\002\000\006\010" +
    "\055\023\054\001\002\000\004\006\u0104\001\002\000\004" +
    "\015\u0105\001\002\000\016\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\001\002\000\004\047\u0108\001\002" +
    "\000\016\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\001\002\000\004\006\u0109\001\002\000\004\015\u010a" +
    "\001\002\000\004\033\u010b\001\002\000\004\006\u010c\001" +
    "\002\000\004\015\u010d\001\002\000\022\006\uffd0\007\uffd0" +
    "\022\uffd0\042\uffd0\047\uffd0\056\uffd0\061\uffd0\062\uffd0\001" +
    "\002\000\004\014\u010f\001\002\000\004\013\u0110\001\002" +
    "\000\004\044\u0111\001\002\000\006\020\165\021\164\001" +
    "\002\000\004\006\u0113\001\002\000\004\015\u0114\001\002" +
    "\000\016\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\004\014\u0116\001\002\000\004\013\u0117" +
    "\001\002\000\004\044\u0118\001\002\000\006\020\165\021" +
    "\164\001\002\000\004\006\u011a\001\002\000\004\015\u011b" +
    "\001\002\000\016\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\001\002\000\004\014\u011d\001\002\000\004" +
    "\013\u011e\001\002\000\004\044\u011f\001\002\000\006\020" +
    "\165\021\164\001\002\000\004\006\u0121\001\002\000\004" +
    "\015\u0122\001\002\000\016\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\001\002\000\006\012\227\013\230" +
    "\001\002\000\004\014\u0125\001\002\000\004\014\u0126\001" +
    "\002\000\004\023\u0127\001\002\000\004\021\u0128\001\002" +
    "\000\004\016\u0129\001\002\000\004\017\u012a\001\002\000" +
    "\006\010\055\023\054\001\002\000\004\006\u012c\001\002" +
    "\000\004\015\u012d\001\002\000\022\006\uffe4\007\uffe4\022" +
    "\uffe4\042\uffe4\047\uffe4\056\uffe4\061\uffe4\062\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\004\002\004\001\001\000\026\003\025\004" +
    "\011\005\022\006\013\015\017\017\015\021\021\026\007" +
    "\031\023\034\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\176" +
    "\005\022\006\013\015\017\017\015\021\021\026\007\031" +
    "\023\034\012\001\001\000\002\001\001\000\006\022\033" +
    "\025\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\052\023\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\070\013\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\107" +
    "\001\001\000\002\001\001\000\004\011\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\122" +
    "\001\001\000\002\001\001\000\004\011\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\127\001\001" +
    "\000\002\001\001\000\004\011\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\137\001\001\000" +
    "\002\001\001\000\004\011\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\144\001\001\000\002\001" +
    "\001\000\004\011\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\052\023\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\217\016\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\242\036\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\052\023\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\275\033" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\052\023\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\052\023\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\365\030\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\052" +
    "\023\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\052\023\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u0123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    DefaultPieDataset dataset = new DefaultPieDataset();
    JFreeChart pieChart = ChartFactory.createPieChart(null, dataset, true, true, false);
    DefaultCategoryDataset barChart = new DefaultCategoryDataset();
    JFreeChart barchart = ChartFactory.createBarChart(null, null, null, barChart);
    DefaultCategoryDataset dataLine = new DefaultCategoryDataset();
    JFreeChart lineChart = ChartFactory.createLineChart(null, null, null, dataLine);
    DefaultCategoryDataset histograma = new DefaultCategoryDataset();
    JFreeChart histoChart = ChartFactory.createBarChart(null, null, null, histograma);
    ArrayList<Object> valores_histograma_arreglo = new ArrayList<>();

    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public TablaArreglos tablaArreglos = new TablaArreglos();
    public ArrayList<ErroresSintacticos> erroresSintacticos = new ArrayList<>();

    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
        erroresSintacticos.add(new ErroresSintacticos("Sintactico", s.value.toString(), s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
        erroresSintacticos.add(new ErroresSintacticos("Sintactico", s.value.toString(), s.left, s.right));
    }

    public void imprimirVariables() {
        System.out.println("Variables reconocidas:");
        for (Variable variable : tablaSimbolos.obtenerVariables()) {
            System.out.println(variable.toString());
        }
    }

    public void imprimirArreglos() {
        System.out.println("Arreglos reconocidos:");
        for (Arreglos arreglo : tablaArreglos.obtenerArreglos()) {
            System.out.println(arreglo.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= PROGRAM codigo END PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= imprimir_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= graficoPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= graficoBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= graficoLinea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= histograma_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= VAR DOS_PUNTOS tipo_variable DOS_PUNTOS DOS_PUNTOS IDENTIFICADOR MENOR GUION operacion END PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    
    String tipo_variable =String.valueOf(a);
    String nombre = String.valueOf(b);
    nombre = nombre.toLowerCase();
    String valor = String.valueOf(c);
    

    System.out.println("Declaración de variable: "+tipo_variable+" "+nombre+" = "+valor);

    //Si C es un identificador, se busca en la tabla de simbolos
    //Si es decimal solo seran numeros, si es una cadena contendrá comillas
    //Si es un identificador puede tener letras y numeros pero no comillas
    tablaSimbolos.agregarVariable(new Variable(tipo_variable, nombre, valor));
    


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_variable ::= DOUBLE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_variable ::= CHAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacion ::= SUM PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) + Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion ::= RES PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) - Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= MULT PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) * Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= DIV PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) / Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= MOD PARENTESIS_IZQ operacion COMA operacion PARENTESIS_DER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Double.parseDouble(n1.toString()) % Double.parseDouble(n2.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Variable variable = tablaSimbolos.obtenerVariable(id.toString().toLowerCase());
                    if (variable != null) {
                        RESULT = variable.getValor();
                    } else {
                        System.out.println("Error semántico: La variable "+id+" no ha sido declarada");
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= MEDIA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    double suma = 0;
                    for(Object valor : arrayList){
                        suma += Double.parseDouble(valor.toString());
                    }
                    RESULT = suma / arrayList.size();

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= MEDIANA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    //ordenamos el arreglo de menor a mayor
                    //Parseamos los valores a double
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));

                    }

                    Collections.sort(valores);

                    int n = valores.size();

                    if (n % 2 == 0) {
                        RESULT = (valores.get((n-1)/2) + valores.get(n/2)) / 2;
                    } else {
                        RESULT = valores.get(n/2);
                    }


                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion ::= MODA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    Map<Double, Integer> frecuencias = new HashMap<>();

                    for (Double valor : valores){
                        frecuencias.put(valor, frecuencias.getOrDefault(valor, 0) + 1);
                    }

                    double moda = 0;

                    int max = 0;

                    for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                        if (entry.getValue() > max){
                            moda = entry.getKey();
                            max = entry.getValue();
                        }
                    }

                    RESULT = moda;

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion ::= VARIANZA PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    //Calculamos la media
                    double suma = 0;
                    for(Double valor : valores){
                        suma += valor;
                    }
                    double media = suma / valores.size();

                    //calculamos la varianza
                    double varianza = 0;
                    for(Double valor : valores){
                        varianza += Math.pow(valor - media, 2);
                    }
                    varianza = varianza / valores.size();

                    RESULT = varianza;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= MAX PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.max(valores);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= MIN PARENTESIS_IZQ valores_arreglo_org PARENTESIS_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.min(valores);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arreglo ::= ARR DOS_PUNTOS tipo_variable DOS_PUNTOS DOS_PUNTOS ARROBA IDENTIFICADOR MENOR GUION valores_arreglo_org END PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

    String tipo_variable = String.valueOf(a);
    String nombre = String.valueOf(b).toLowerCase();

    Arreglos arreglo = new Arreglos(tipo_variable, nombre);

    ArrayList<Object> arrayList = (ArrayList<Object>) c;

    for(Object valor : arrayList){
        arreglo.agregarValor(valor);
    }

    tablaArreglos.agregarArreglo(arreglo);


    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valores_arreglo_org ::= CORCHETE_IZQ valores_arreglo CORCHETE_DER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo_org",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valores_arreglo_org ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    
                    Arreglos arreglo = tablaArreglos.obtenerArreglo(v.toString().toLowerCase());
                    if (arreglo != null) {
                        RESULT = arreglo.obtenerValores();
                    } else {
                        System.out.println("Error semántico: El arreglo "+v+" no ha sido declarado");
                    }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo_org",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valores_arreglo ::= operacion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        ((ArrayList<Object>) RESULT).add(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valores_arreglo ::= valores_arreglo COMA operacion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((ArrayList<Object>) lista).add(v); RESULT = lista;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL lista_impresion END PUNTO_COMA 
            {
              Object RESULT =null;
		Principal.txtConsola.append("\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_impresion ::= operacion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Principal.txtConsola.append(v.toString()+", ");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_impresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_impresion ::= lista_impresion COMA operacion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Principal.txtConsola.append(v.toString()+", ");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_impresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imprimir_arreglo ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL titulo_impresion GUION MAYOR valores_arreglo_org END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        String titulo = String.valueOf(t);
                        ArrayList<Object> valores = (ArrayList<Object>) d;

                        Principal.txtConsola.append("\n--------------------\n"+titulo+"\n--------------------\n");
                        for(Object valor : valores){
                            Principal.txtConsola.append(valor.toString()+"\n");
                        }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // titulo_impresion ::= CADENA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_impresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // titulo_impresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Variable variable = tablaSimbolos.obtenerVariable(t.toString().toLowerCase());
                        if (variable != null) {
                            RESULT = variable.getValor();
                        } else {
                            System.out.println("Error semántico: La variable "+t+" no ha sido declarada");
                        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_impresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graficoPie ::= GRAPHPIE PARENTESIS_IZQ lista_instrucciones_pie EXEC GRAPHPIE END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA 
            {
              Object RESULT =null;
		

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(pieChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                dataset = new DefaultPieDataset();
                pieChart = ChartFactory.createPieChart(null, dataset, true, true, false);
                 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficoPie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_instrucciones_pie ::= valores_grafica_pie 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_pie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_instrucciones_pie ::= lista_instrucciones_pie valores_grafica_pie 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_pie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valores_grafica_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                            //Casteamos el objeto a un arraylist
                            ArrayList<Object> lista = (ArrayList<Object>) l;

                            //Tenemos los siguientes casos, el dataset esta vacio, o ya tiene valores
                            //Si esta vacio, se agregan los valores de la llave y el valor en 0

                            //Si ya tiene valores se modifican las llaves pero no se modifican los valores existentes
                            
                            if(dataset.getItemCount() == 0){
                                for (int i = 0; i < lista.size(); i++) {
                                    dataset.setValue(lista.get(i).toString(), 0);
                                }
                            } else {
                                //Creamos un nuevo dataset
                                DefaultPieDataset nuevoDatasetTemporal = new DefaultPieDataset();

                                for (int i = 0; i < lista.size(); i++) {
                                    Comparable oldKey = (Comparable) dataset.getKeys().get(i);
                                    Number value = dataset.getValue(oldKey);
                                    Comparable newKey = (Comparable) lista.get(i).toString();
                                    nuevoDatasetTemporal.setValue(newKey, value);
                                    System.out.println("Se agrego al nuevo dataset Llave: "+newKey+" Valor: "+value);

                                }
                                
                                dataset.clear();

                                for(Object newKey : nuevoDatasetTemporal.getKeys()){
                                    dataset.setValue((Comparable) newKey, nuevoDatasetTemporal.getValue((String) newKey));

                                }

                                System.out.println("Se modifico el dataset");

                            }

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_pie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valores_grafica_pie ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) v;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(dataset.getItemCount() == 0){
                            for (Object valor : lista) {
                                dataset.setValue("llaveNueva"+i, Double.parseDouble(valor.toString()));
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                Comparable key = (Comparable) dataset.getKeys().get(i);
                                dataset.setValue(key, Double.parseDouble(valor.toString()));
                                i++;
                            }
                        }

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_pie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valores_grafica_pie ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        pieChart.setTitle(t.toString());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_pie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_G ::= valores_arreglo_org 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_G",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cadena_titulo ::= CADENA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena_titulo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cadena_titulo ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Variable variable = tablaSimbolos.obtenerVariable(t.toString().toLowerCase());
                        if (variable != null) {
                            RESULT = variable.getValor();
                        } else {
                            System.out.println("Error semántico: La variable "+t+" no ha sido declarada");
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena_titulo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // graficoBarra ::= GRAPHBAR PARENTESIS_IZQ lista_instrucciones_barra EXEC GRAPHBAR END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA 
            {
              Object RESULT =null;
		

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(barchart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                barChart = new DefaultCategoryDataset();
                barchart = ChartFactory.createBarChart(null, null, null, barChart);
                 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficoBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_instrucciones_barra ::= valores_grafica_barra 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_barra",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_instrucciones_barra ::= lista_instrucciones_barra valores_grafica_barra 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_barra",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valores_grafica_barra ::= TITULOX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            barchart.getCategoryPlot().getDomainAxis().setLabel(t.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_barra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valores_grafica_barra ::= TITULOY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            barchart.getCategoryPlot().getRangeAxis().setLabel(t.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_barra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valores_grafica_barra ::= EJEX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) x;
                        int i = 0;
                    
                        //Si el dataset no esta vació se modifican las llaves existentes y se mantiene el valor
                        //Si esta vació se crean las llaves con los valores del arreglo y se les asigna 0
                        if(barChart.getColumnCount() == 0){
                            for (Object valor : lista) {
                                barChart.addValue(0, "Categoria 1", valor.toString());
                                i++;
                            }
                        } else {
                            //Creamos un nuevo dataset temporal
                            DefaultCategoryDataset nuevoDatasetTemporal = new DefaultCategoryDataset();
                            for (Object valor : lista) {
                                nuevoDatasetTemporal.setValue(barChart.getValue("Categoria 1", barChart.getColumnKey(i).toString()), "Categoria 1", valor.toString());
                                i++;
                            }

                            //Vaciamos el barChart
                            barChart.clear();

                            //Agregamos los valores del nuevo dataset temporal al barChart
                            for (Object key : nuevoDatasetTemporal.getColumnKeys()) {
                                barChart.addValue(nuevoDatasetTemporal.getValue("Categoria 1", key.toString()), "Categoria 1", key.toString());
                            }
                        }
                        
                    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_barra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valores_grafica_barra ::= EJEY DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) y;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(barChart.getRowCount() == 0){
                            for (Object valor : lista) {
                                barChart.addValue(Double.parseDouble(valor.toString()), "Categoria 1", "llaveNueva"+i);
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                barChart.setValue(Double.parseDouble(valor.toString()), "Categoria 1", barChart.getColumnKey(i).toString());
                                i++;
                            }
                        }
                    
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_barra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valores_grafica_barra ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        barchart.setTitle(t.toString());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_barra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // graficoLinea ::= GRAPHLINE PARENTESIS_IZQ lista_instrucciones_linea EXEC GRAPHLINE END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA 
            {
              Object RESULT =null;
		

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(lineChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                dataLine = new DefaultCategoryDataset();
                lineChart = ChartFactory.createLineChart(null, null, null, dataLine);
                 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficoLinea",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_instrucciones_linea ::= valores_grafica_linea 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_linea",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_instrucciones_linea ::= lista_instrucciones_linea valores_grafica_linea 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_linea",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valores_grafica_linea ::= TITULOX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            lineChart.getCategoryPlot().getDomainAxis().setLabel(t.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_linea",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valores_grafica_linea ::= TITULOY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            lineChart.getCategoryPlot().getRangeAxis().setLabel(t.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_linea",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valores_grafica_linea ::= EJEX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        
                            //Casteamos el objeto a un arraylist
                            ArrayList<Object> lista = (ArrayList<Object>) x;
                            int i = 0;
                        
                            //Si el dataset no esta vació se modifican las llaves existentes y se mantiene el valor
                            //Si esta vació se crean las llaves con los valores del arreglo y se les asigna 0
                            if(dataLine.getColumnCount() == 0){
                                for (Object valor : lista) {
                                    dataLine.addValue(0, "Categoria 1", valor.toString());
                                    i++;
                                }
                            } else {
                                //Creamos un nuevo dataset temporal
                                DefaultCategoryDataset nuevoDatasetTemporal = new DefaultCategoryDataset();
                                for (Object valor : lista) {
                                    nuevoDatasetTemporal.setValue(dataLine.getValue("Categoria 1", dataLine.getColumnKey(i).toString()), "Categoria 1", valor.toString());
                                    i++;
                                }
    
                                //Vaciamos el barChart
                                dataLine.clear();
    
                                //Agregamos los valores del nuevo dataset temporal al barChart
                                for (Object key : nuevoDatasetTemporal.getColumnKeys()) {
                                    dataLine.addValue(nuevoDatasetTemporal.getValue("Categoria 1", key.toString()), "Categoria 1", key.toString());
                                }
                            }

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_linea",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valores_grafica_linea ::= EJEY DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) y;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(dataLine.getRowCount() == 0){
                            for (Object valor : lista) {
                                dataLine.addValue(Double.parseDouble(valor.toString()), "Categoria 1", "llaveNueva"+i);
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                dataLine.addValue(Double.parseDouble(valor.toString()), "Categoria 1", dataLine.getColumnKey(i).toString());
                                i++;
                            }
                        }

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_linea",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valores_grafica_linea ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        lineChart.setTitle(t.toString());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_grafica_linea",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // histograma_p ::= HISTOGRAM PARENTESIS_IZQ lista_instrucciones_histograma EXEC HISTOGRAM END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		

                //Lo convertimos a double
                ArrayList<Double> valores = new ArrayList<>();
                for(Object valor : valores_histograma_arreglo){
                    valores.add(Double.parseDouble(valor.toString()));
                }

                //Ordenamos el arreglo
                Collections.sort(valores);

                //Para generar el histograma necesitamos el valor, junto a su frecuencia
                //De ahí obtenemos la frecuencia acumulada y la frecuencia relativa. DEbemos meter a la consola una pequeña tabla con estos valores

                //Obtenemos la frecuencia de cada valor
                Map<Double, Integer> frecuencias = new HashMap<>();
                for (Double valor : valores){
                    frecuencias.put(valor, frecuencias.getOrDefault(valor, 0) + 1);
                }

                //Obtenemos la frecuencia acumulada
                Map<Double, Integer> frecuenciasAcumuladas = new HashMap<>();
                int acumulada = 0;
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    acumulada += entry.getValue();
                    frecuenciasAcumuladas.put(entry.getKey(), acumulada);
                }

                //Obtenemos la frecuencia relativa

                Map<Double, Double> frecuenciasRelativas = new HashMap<>();
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    frecuenciasRelativas.put(entry.getKey(), (double) entry.getValue() / valores.size());
                }

                //Imprimimos la tabla
                Principal.txtConsola.append("\n--------------------\nAnalisis de arreglo\n--------------------\n");
                Principal.txtConsola.append("\nValor\tFrecuencia\tFrecuencia Acumulada\tFrecuencia Relativa\n");
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    Principal.txtConsola.append(entry.getKey()+"\t"+entry.getValue()+"\t"+frecuenciasAcumuladas.get(entry.getKey())+"\t"+frecuenciasRelativas.get(entry.getKey())+"\n");
                }
                //Imprimimos fila totales que es la suna de las frecuencias, la frecuencia acumulada y la frecuencia relativa
                Principal.txtConsola.append("\nTotales\t"+valores.size()+"\t"+valores.size()+"\t1.0\n");

                //Agregamos los valores al histograma
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    histograma.addValue(entry.getValue(), "Categoria 1", entry.getKey());
                }

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(histoChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                histograma = new DefaultCategoryDataset();
                histoChart = ChartFactory.createBarChart(null, null, null, histograma);
                valores_histograma_arreglo = new ArrayList<Object>();
                 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("histograma_p",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_instrucciones_histograma ::= valores_histograma 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_histograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_instrucciones_histograma ::= lista_instrucciones_histograma valores_histograma 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones_histograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valores_histograma ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL titulo_impresion END PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            histoChart.setTitle(t.toString());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_histograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valores_histograma ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G END PUNTO_COMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                        valores_histograma_arreglo = (ArrayList<Object>) v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores_histograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
