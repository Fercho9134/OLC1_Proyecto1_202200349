/*--------------Codigo usuario-------------*/

//Importaciones paquetes
package Analizadores;
import java_cup.runtime.*;
import main.TablaSimbolos;
import main.Variable;
import main.Arreglos;
import main.TablaArreglos;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import vista.Principal;
import org.jfree.chart.*;
import org.jfree.data.general.*;
import javax.swing.*;
import vista.Grafica;
import main.ErroresSintacticos;
import org.jfree.data.category.DefaultCategoryDataset;

//Parser, variables, metodos
parser code {:

    DefaultPieDataset dataset = new DefaultPieDataset();
    JFreeChart pieChart = ChartFactory.createPieChart(null, dataset, true, true, false);
    DefaultCategoryDataset barChart = new DefaultCategoryDataset();
    JFreeChart barchart = ChartFactory.createBarChart(null, null, null, barChart);
    DefaultCategoryDataset dataLine = new DefaultCategoryDataset();
    JFreeChart lineChart = ChartFactory.createLineChart(null, null, null, dataLine);
    DefaultCategoryDataset histograma = new DefaultCategoryDataset();
    JFreeChart histoChart = ChartFactory.createBarChart(null, null, null, histograma);
    ArrayList<Object> valores_histograma_arreglo = new ArrayList<>();

    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public TablaArreglos tablaArreglos = new TablaArreglos();
    public ArrayList<ErroresSintacticos> erroresSintacticos = new ArrayList<>();

    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
        erroresSintacticos.add(new ErroresSintacticos("Sintactico", s.value.toString(), s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
        erroresSintacticos.add(new ErroresSintacticos("Sintactico", s.value.toString(), s.left, s.right));
    }

    public void imprimirVariables() {
        System.out.println("Variables reconocidas:");
        for (Variable variable : tablaSimbolos.obtenerVariables()) {
            System.out.println(variable.toString());
        }
    }

    public void imprimirArreglos() {
        System.out.println("Arreglos reconocidos:");
        for (Arreglos arreglo : tablaArreglos.obtenerArreglos()) {
            System.out.println(arreglo.toString());
        }
    }
:}


terminal String DECIMAL;
terminal String PROGRAM, END;
terminal String VAR, CORCHETE_IZQ, CORCHETE_DER, DOUBLE, CHAR, DOS_PUNTOS, PUNTO_COMA;
terminal String MENOR, GUION, CADENA, IDENTIFICADOR, ARR, ARROBA, COMA;
terminal String SUM, RES, MULT, DIV, MOD, PARENTESIS_IZQ, PARENTESIS_DER;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE, PRINT, IGUAL, COLUMN, MAYOR;
terminal String GRAPHBAR, TITULO, EJEX, EJEY, TITULOX, TITULOY, EXEC;
terminal String GRAPHPIE, LABEL, VALUES, GRAPHLINE, HISTOGRAM;

non terminal inicio, codigo, sentencia, declaracion, arreglo, tipo_variable, valor, operacion, expresion_aritmetica;
non terminal valores_arreglo, valores_arreglo_org, imprimir, lista_impresion, imprimir_arreglo, titulo_impresion;
non terminal graficoPie, valores_grafica_pie, array_G, cadena_titulo, lista_instrucciones_pie;
non terminal graficoBarra, valores_grafica_barra, lista_instrucciones_barra, graficoLinea, valores_grafica_linea, lista_instrucciones_linea;
non terminal histograma_p, valores_histograma, lista_instrucciones_histograma;

/*--------------Producciones-------------*/

inicio ::= PROGRAM codigo END PROGRAM;

codigo ::= sentencia | codigo sentencia;

sentencia ::= declaracion | arreglo | imprimir | imprimir_arreglo | graficoPie | graficoBarra | graficoLinea | histograma_p;

declaracion ::= VAR DOS_PUNTOS tipo_variable:a DOS_PUNTOS DOS_PUNTOS IDENTIFICADOR:b MENOR GUION operacion:c  END PUNTO_COMA{:
    
    String tipo_variable =String.valueOf(a);
    String nombre = String.valueOf(b);
    nombre = nombre.toLowerCase();
    String valor = String.valueOf(c);
    

    System.out.println("Declaración de variable: "+tipo_variable+" "+nombre+" = "+valor);

    //Si C es un identificador, se busca en la tabla de simbolos
    //Si es decimal solo seran numeros, si es una cadena contendrá comillas
    //Si es un identificador puede tener letras y numeros pero no comillas
    tablaSimbolos.agregarVariable(new Variable(tipo_variable, nombre, valor));
    

:};

tipo_variable ::= DOUBLE:r {:RESULT = r;:} | CHAR:r {:RESULT = r;:};


operacion ::= SUM PARENTESIS_IZQ operacion:n1 COMA operacion:n2 PARENTESIS_DER {:RESULT = Double.parseDouble(n1.toString()) + Double.parseDouble(n2.toString());:}
                | RES PARENTESIS_IZQ operacion:n1 COMA operacion:n2 PARENTESIS_DER {:RESULT = Double.parseDouble(n1.toString()) - Double.parseDouble(n2.toString());:}
                | MULT PARENTESIS_IZQ operacion:n1 COMA operacion:n2 PARENTESIS_DER {:RESULT = Double.parseDouble(n1.toString()) * Double.parseDouble(n2.toString());:}
                | DIV PARENTESIS_IZQ operacion:n1 COMA operacion:n2 PARENTESIS_DER {:RESULT = Double.parseDouble(n1.toString()) / Double.parseDouble(n2.toString());:}
                | MOD PARENTESIS_IZQ operacion:n1 COMA operacion:n2 PARENTESIS_DER {:RESULT = Double.parseDouble(n1.toString()) % Double.parseDouble(n2.toString());:}
                | DECIMAL:n {:RESULT = n;:}
                | IDENTIFICADOR:id {:
                    Variable variable = tablaSimbolos.obtenerVariable(id.toString().toLowerCase());
                    if (variable != null) {
                        RESULT = variable.getValor();
                    } else {
                        System.out.println("Error semántico: La variable "+id+" no ha sido declarada");
                    }
                :}
                | CADENA:n {:RESULT = n;:}

                | MEDIA PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    double suma = 0;
                    for(Object valor : arrayList){
                        suma += Double.parseDouble(valor.toString());
                    }
                    RESULT = suma / arrayList.size();

                :}
                | MEDIANA PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    //ordenamos el arreglo de menor a mayor
                    //Parseamos los valores a double
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));

                    }

                    Collections.sort(valores);

                    int n = valores.size();

                    if (n % 2 == 0) {
                        RESULT = (valores.get((n-1)/2) + valores.get(n/2)) / 2;
                    } else {
                        RESULT = valores.get(n/2);
                    }


                     :} 

                | MODA PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    Map<Double, Integer> frecuencias = new HashMap<>();

                    for (Double valor : valores){
                        frecuencias.put(valor, frecuencias.getOrDefault(valor, 0) + 1);
                    }

                    double moda = 0;

                    int max = 0;

                    for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                        if (entry.getValue() > max){
                            moda = entry.getKey();
                            max = entry.getValue();
                        }
                    }

                    RESULT = moda;

                :}

                | VARIANZA PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:

                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    //Calculamos la media
                    double suma = 0;
                    for(Double valor : valores){
                        suma += valor;
                    }
                    double media = suma / valores.size();

                    //calculamos la varianza
                    double varianza = 0;
                    for(Double valor : valores){
                        varianza += Math.pow(valor - media, 2);
                    }
                    varianza = varianza / valores.size();

                    RESULT = varianza;
                :}

                | MAX PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.max(valores);
                :}

                | MIN PARENTESIS_IZQ valores_arreglo_org:v PARENTESIS_DER{:
                    ArrayList<Object> arrayList = (ArrayList<Object>) v;
                    ArrayList<Double> valores = new ArrayList<>();
                    for(Object valor : arrayList){
                        valores.add(Double.parseDouble(valor.toString()));
                    }

                    RESULT = Collections.min(valores);
                :}
                ;


arreglo ::= ARR DOS_PUNTOS tipo_variable:a DOS_PUNTOS DOS_PUNTOS ARROBA IDENTIFICADOR:b MENOR GUION valores_arreglo_org:c END PUNTO_COMA{:

    String tipo_variable = String.valueOf(a);
    String nombre = String.valueOf(b).toLowerCase();

    Arreglos arreglo = new Arreglos(tipo_variable, nombre);

    ArrayList<Object> arrayList = (ArrayList<Object>) c;

    for(Object valor : arrayList){
        arreglo.agregarValor(valor);
    }

    tablaArreglos.agregarArreglo(arreglo);


    :};

valores_arreglo_org ::= CORCHETE_IZQ valores_arreglo:v CORCHETE_DER {:RESULT = v;:} 
                    |  /*Si lo que obtenenos es una variable refernciando a un arreglo*/ ARROBA IDENTIFICADOR:v {:
                    
                    Arreglos arreglo = tablaArreglos.obtenerArreglo(v.toString().toLowerCase());
                    if (arreglo != null) {
                        RESULT = arreglo.obtenerValores();
                    } else {
                        System.out.println("Error semántico: El arreglo "+v+" no ha sido declarado");
                    }
                    :} ;

valores_arreglo ::= operacion:v {:
                        RESULT = new ArrayList<>();
                        ((ArrayList<Object>) RESULT).add(v);:} 
                    | valores_arreglo:lista COMA operacion:v {:((ArrayList<Object>) lista).add(v); RESULT = lista;:};

imprimir ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL lista_impresion END PUNTO_COMA {:Principal.txtConsola.append("\n");:};


lista_impresion ::= operacion:v {:
                        Principal.txtConsola.append(v.toString()+", ");
                    :} 
                    | lista_impresion:lista COMA operacion:v {:
                        Principal.txtConsola.append(v.toString()+", ");
                    :};

imprimir_arreglo ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL titulo_impresion:t GUION MAYOR valores_arreglo_org:d END PUNTO_COMA{:

                        String titulo = String.valueOf(t);
                        ArrayList<Object> valores = (ArrayList<Object>) d;

                        Principal.txtConsola.append("\n--------------------\n"+titulo+"\n--------------------\n");
                        for(Object valor : valores){
                            Principal.txtConsola.append(valor.toString()+"\n");
                        }
                        :};

titulo_impresion ::= CADENA:t {:RESULT = t;:} | IDENTIFICADOR:t {:
                        Variable variable = tablaSimbolos.obtenerVariable(t.toString().toLowerCase());
                        if (variable != null) {
                            RESULT = variable.getValor();
                        } else {
                            System.out.println("Error semántico: La variable "+t+" no ha sido declarada");
                        }
        :};

graficoPie ::= GRAPHPIE PARENTESIS_IZQ lista_instrucciones_pie EXEC GRAPHPIE END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA{:

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(pieChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                dataset = new DefaultPieDataset();
                pieChart = ChartFactory.createPieChart(null, dataset, true, true, false);
                 
                :};

lista_instrucciones_pie ::= valores_grafica_pie:v {:
                            RESULT = v;
                        :} 
                        | lista_instrucciones_pie:lista valores_grafica_pie:v {:
                            RESULT = lista;
                        :};
//Para los valores de la grafica de pie podra venir varias veces la misma insruccion, por ejemplo dos titulos. Pero solo se tomara el ultimo
//Los valores a obtener son label, values, titulo.

valores_grafica_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G:l END PUNTO_COMA{:

                            //Casteamos el objeto a un arraylist
                            ArrayList<Object> lista = (ArrayList<Object>) l;

                            //Tenemos los siguientes casos, el dataset esta vacio, o ya tiene valores
                            //Si esta vacio, se agregan los valores de la llave y el valor en 0

                            //Si ya tiene valores se modifican las llaves pero no se modifican los valores existentes
                            
                            if(dataset.getItemCount() == 0){
                                for (int i = 0; i < lista.size(); i++) {
                                    dataset.setValue(lista.get(i).toString(), 0);
                                }
                            } else {
                                //Creamos un nuevo dataset
                                DefaultPieDataset nuevoDatasetTemporal = new DefaultPieDataset();

                                for (int i = 0; i < lista.size(); i++) {
                                    Comparable oldKey = (Comparable) dataset.getKeys().get(i);
                                    Number value = dataset.getValue(oldKey);
                                    Comparable newKey = (Comparable) lista.get(i).toString();
                                    nuevoDatasetTemporal.setValue(newKey, value);
                                    System.out.println("Se agrego al nuevo dataset Llave: "+newKey+" Valor: "+value);

                                }
                                
                                dataset.clear();

                                for(Object newKey : nuevoDatasetTemporal.getKeys()){
                                    dataset.setValue((Comparable) newKey, nuevoDatasetTemporal.getValue((String) newKey));

                                }

                                System.out.println("Se modifico el dataset");

                            }

                        :}
                    | VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G:v END PUNTO_COMA{:

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) v;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(dataset.getItemCount() == 0){
                            for (Object valor : lista) {
                                dataset.setValue("llaveNueva"+i, Double.parseDouble(valor.toString()));
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                Comparable key = (Comparable) dataset.getKeys().get(i);
                                dataset.setValue(key, Double.parseDouble(valor.toString()));
                                i++;
                            }
                        }

                    :}
                    | TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                        pieChart.setTitle(t.toString());
                    :};

array_G ::= valores_arreglo_org:v {:RESULT = v;:};

cadena_titulo ::= CADENA:t {:RESULT = t;:}
                    | IDENTIFICADOR:t {:
                        Variable variable = tablaSimbolos.obtenerVariable(t.toString().toLowerCase());
                        if (variable != null) {
                            RESULT = variable.getValor();
                        } else {
                            System.out.println("Error semántico: La variable "+t+" no ha sido declarada");
                        }
                    :};

graficoBarra ::= GRAPHBAR PARENTESIS_IZQ lista_instrucciones_barra EXEC GRAPHBAR END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA{:

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(barchart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                barChart = new DefaultCategoryDataset();
                barchart = ChartFactory.createBarChart(null, null, null, barChart);
                 
                :};

lista_instrucciones_barra ::= valores_grafica_barra:v {:
                            RESULT = v;
                        :} 
                        | lista_instrucciones_barra:lista valores_grafica_barra:v {:
                            RESULT = lista;
                        :};

valores_grafica_barra ::= TITULOX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                            barchart.getCategoryPlot().getDomainAxis().setLabel(t.toString());
                        :}
                    | TITULOY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                            barchart.getCategoryPlot().getRangeAxis().setLabel(t.toString());
                        :}
                    | EJEX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G:x END PUNTO_COMA{:

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) x;
                        int i = 0;
                    
                        //Si el dataset no esta vació se modifican las llaves existentes y se mantiene el valor
                        //Si esta vació se crean las llaves con los valores del arreglo y se les asigna 0
                        if(barChart.getColumnCount() == 0){
                            for (Object valor : lista) {
                                barChart.addValue(0, "Categoria 1", valor.toString());
                                i++;
                            }
                        } else {
                            //Creamos un nuevo dataset temporal
                            DefaultCategoryDataset nuevoDatasetTemporal = new DefaultCategoryDataset();
                            for (Object valor : lista) {
                                nuevoDatasetTemporal.setValue(barChart.getValue("Categoria 1", barChart.getColumnKey(i).toString()), "Categoria 1", valor.toString());
                                i++;
                            }

                            //Vaciamos el barChart
                            barChart.clear();

                            //Agregamos los valores del nuevo dataset temporal al barChart
                            for (Object key : nuevoDatasetTemporal.getColumnKeys()) {
                                barChart.addValue(nuevoDatasetTemporal.getValue("Categoria 1", key.toString()), "Categoria 1", key.toString());
                            }
                        }
                        
                    
                    :}
                    | EJEY DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G:y END PUNTO_COMA{:

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) y;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(barChart.getRowCount() == 0){
                            for (Object valor : lista) {
                                barChart.addValue(Double.parseDouble(valor.toString()), "Categoria 1", "llaveNueva"+i);
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                barChart.setValue(Double.parseDouble(valor.toString()), "Categoria 1", barChart.getColumnKey(i).toString());
                                i++;
                            }
                        }
                    
                    :}
                    | TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                        barchart.setTitle(t.toString());
                    :};


graficoLinea ::= GRAPHLINE PARENTESIS_IZQ lista_instrucciones_linea EXEC GRAPHLINE END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA{:

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(lineChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                dataLine = new DefaultCategoryDataset();
                lineChart = ChartFactory.createLineChart(null, null, null, dataLine);
                 
                :};

lista_instrucciones_linea ::= valores_grafica_linea:v {:
                            RESULT = v;
                        :} 
                        | lista_instrucciones_linea:lista valores_grafica_linea:v {:
                            RESULT = lista;
                        :};

valores_grafica_linea ::= TITULOX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                            lineChart.getCategoryPlot().getDomainAxis().setLabel(t.toString());
                        :}
                    | TITULOY DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                            lineChart.getCategoryPlot().getRangeAxis().setLabel(t.toString());
                        :}
                    | EJEX DOS_PUNTOS DOS_PUNTOS CHAR IGUAL array_G:x END PUNTO_COMA{:
                        
                            //Casteamos el objeto a un arraylist
                            ArrayList<Object> lista = (ArrayList<Object>) x;
                            int i = 0;
                        
                            //Si el dataset no esta vació se modifican las llaves existentes y se mantiene el valor
                            //Si esta vació se crean las llaves con los valores del arreglo y se les asigna 0
                            if(dataLine.getColumnCount() == 0){
                                for (Object valor : lista) {
                                    dataLine.addValue(0, "Categoria 1", valor.toString());
                                    i++;
                                }
                            } else {
                                //Creamos un nuevo dataset temporal
                                DefaultCategoryDataset nuevoDatasetTemporal = new DefaultCategoryDataset();
                                for (Object valor : lista) {
                                    nuevoDatasetTemporal.setValue(dataLine.getValue("Categoria 1", dataLine.getColumnKey(i).toString()), "Categoria 1", valor.toString());
                                    i++;
                                }
    
                                //Vaciamos el barChart
                                dataLine.clear();
    
                                //Agregamos los valores del nuevo dataset temporal al barChart
                                for (Object key : nuevoDatasetTemporal.getColumnKeys()) {
                                    dataLine.addValue(nuevoDatasetTemporal.getValue("Categoria 1", key.toString()), "Categoria 1", key.toString());
                                }
                            }

                    :}
                    | EJEY DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G:y END PUNTO_COMA{:

                        //Casteamos el objeto a un arraylist
                        ArrayList<Object> lista = (ArrayList<Object>) y;
                        int i = 0;
                    
                        //Si el dataset no esta vació se agregan los valores a las llaves existentes
                        //Si esta vació se crean las llaves como llaneNueva + i siendo i el contador
                        if(dataLine.getRowCount() == 0){
                            for (Object valor : lista) {
                                dataLine.addValue(Double.parseDouble(valor.toString()), "Categoria 1", "llaveNueva"+i);
                                i++;
                            }
                        } else {
                            for (Object valor : lista) {
                                dataLine.addValue(Double.parseDouble(valor.toString()), "Categoria 1", dataLine.getColumnKey(i).toString());
                                i++;
                            }
                        }

                    :}
                    | TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL cadena_titulo:t END PUNTO_COMA{:
                        lineChart.setTitle(t.toString());
                    :};

histograma_p ::= HISTOGRAM PARENTESIS_IZQ lista_instrucciones_histograma:arreglo EXEC HISTOGRAM END PUNTO_COMA PARENTESIS_DER END PUNTO_COMA{:

                //Lo convertimos a double
                ArrayList<Double> valores = new ArrayList<>();
                for(Object valor : valores_histograma_arreglo){
                    valores.add(Double.parseDouble(valor.toString()));
                }

                //Ordenamos el arreglo
                Collections.sort(valores);

                //Para generar el histograma necesitamos el valor, junto a su frecuencia
                //De ahí obtenemos la frecuencia acumulada y la frecuencia relativa. DEbemos meter a la consola una pequeña tabla con estos valores

                //Obtenemos la frecuencia de cada valor
                Map<Double, Integer> frecuencias = new HashMap<>();
                for (Double valor : valores){
                    frecuencias.put(valor, frecuencias.getOrDefault(valor, 0) + 1);
                }

                //Obtenemos la frecuencia acumulada
                Map<Double, Integer> frecuenciasAcumuladas = new HashMap<>();
                int acumulada = 0;
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    acumulada += entry.getValue();
                    frecuenciasAcumuladas.put(entry.getKey(), acumulada);
                }

                //Obtenemos la frecuencia relativa

                Map<Double, Double> frecuenciasRelativas = new HashMap<>();
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    frecuenciasRelativas.put(entry.getKey(), (double) entry.getValue() / valores.size());
                }

                //Imprimimos la tabla
                Principal.txtConsola.append("\n--------------------\nAnalisis de arreglo\n--------------------\n");
                Principal.txtConsola.append("\nValor\tFrecuencia\tFrecuencia Acumulada\tFrecuencia Relativa\n");
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    Principal.txtConsola.append(entry.getKey()+"\t"+entry.getValue()+"\t"+frecuenciasAcumuladas.get(entry.getKey())+"\t"+frecuenciasRelativas.get(entry.getKey())+"\n");
                }
                //Imprimimos fila totales que es la suna de las frecuencias, la frecuencia acumulada y la frecuencia relativa
                Principal.txtConsola.append("\nTotales\t"+valores.size()+"\t"+valores.size()+"\t1.0\n");

                //Agregamos los valores al histograma
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()){
                    histograma.addValue(entry.getValue(), "Categoria 1", entry.getKey());
                }

                Grafica grafica = new Grafica();
                grafica.crearPanelGrafica(histoChart);
                Principal.escritorio.add(grafica);
                grafica.setVisible(true);
                histograma = new DefaultCategoryDataset();
                histoChart = ChartFactory.createBarChart(null, null, null, histograma);
                valores_histograma_arreglo = new ArrayList<Object>();
                 
                :};

lista_instrucciones_histograma ::= valores_histograma:v {:
                            RESULT = v;
                        :} 
                        | lista_instrucciones_histograma:lista valores_histograma:v {:
                            RESULT = v;
                        :};

valores_histograma ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR IGUAL titulo_impresion:t END PUNTO_COMA{:
                            histoChart.setTitle(t.toString());
                        :}
                    | VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL array_G:v END PUNTO_COMA {:

                        valores_histograma_arreglo = (ArrayList<Object>) v;
                    :};