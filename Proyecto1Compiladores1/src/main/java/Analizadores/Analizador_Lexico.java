// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/Analizadores/Analizador_Lexico.jflex

/*--------Codigo de usuario---------*/
// Paquetes, importaciones
package Analizadores;
import java_cup.runtime.*;
import main.Token;
import vista.Principal;

/*--------Opciones y declaraciones---------*/


@SuppressWarnings("fallthrough")
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\1\22\0\1\1"+
    "\1\5\1\6\5\0\1\7\1\10\2\0\1\11\1\12"+
    "\1\13\1\0\12\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\0\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\30\1\35\1\36\1\37"+
    "\1\40\1\41\1\30\1\42\1\43\1\44\1\45\1\46"+
    "\1\30\1\47\1\50\1\51\1\52\1\0\1\53\1\0"+
    "\1\54\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\30\1\35\1\36\1\37"+
    "\1\40\1\41\1\30\1\42\1\43\1\44\1\45\1\46"+
    "\1\30\1\47\1\50\1\51\12\0\1\3\252\0\2\55"+
    "\115\0\1\56\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\16\20\1\21\1\22\1\1\3\0\5\20\1\0"+
    "\5\20\1\0\6\20\1\0\4\20\1\0\1\20\1\0"+
    "\1\23\1\11\1\0\1\24\3\20\1\25\1\20\1\25"+
    "\1\20\1\26\3\20\1\0\1\20\1\27\1\20\1\30"+
    "\1\31\1\32\1\30\2\20\1\0\2\33\1\34\1\20"+
    "\1\0\1\20\1\35\1\34\1\4\3\20\1\0\1\20"+
    "\1\36\1\37\1\40\2\20\1\0\2\20\1\0\1\41"+
    "\2\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\3\20\1\0\1\42\2\43\1\44\1\20\1\44\1\20"+
    "\1\0\2\20\1\0\1\45\1\46\1\20\1\0\1\47"+
    "\4\20\1\0\1\20\1\0\1\20\2\50\2\51\1\20"+
    "\1\0\2\52\2\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\53\1\54\1\55\1\56\1\55\1\56\1\20\1\0"+
    "\1\57\1\20\1\0\2\60\1\20\1\0\2\61\2\62"+
    "\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\274\0\57\0\57"+
    "\0\57\0\353\0\u011a\0\57\0\57\0\u0149\0\57\0\57"+
    "\0\57\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\57"+
    "\0\57\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\57"+
    "\0\u0468\0\u098c\0\u01a7\0\u09bb\0\u09ea\0\u0a19\0\u01a7\0\u0a48"+
    "\0\57\0\u0a77\0\u01a7\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u01a7\0\u0b91\0\u01a7\0\u0bc0\0\u01a7\0\57\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u01a7\0\57\0\u01a7\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\57\0\57\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u01a7"+
    "\0\u01a7\0\u01a7\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u01a7\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf"+
    "\0\u11fe\0\u01a7\0\u122d\0\u125c\0\u01a7\0\u128b\0\57\0\u12ba"+
    "\0\u12e9\0\u1318\0\u1347\0\u1376\0\57\0\u01a7\0\u13a5\0\u13d4"+
    "\0\u01a7\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u01a7\0\57\0\u15d9\0\u1608\0\u01a7"+
    "\0\57\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u01a7\0\57\0\u01a7\0\u01a7\0\u01a7\0\57\0\57\0\u1780"+
    "\0\u17af\0\u01a7\0\u17de\0\u180d\0\u01a7\0\57\0\u183c\0\u186b"+
    "\0\u01a7\0\57\0\u01a7\0\57\0\u01a7\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\23"+
    "\1\27\1\30\2\23\1\31\1\32\2\23\1\33\1\34"+
    "\1\35\1\36\1\23\1\37\3\23\1\40\1\41\2\2"+
    "\1\42\60\0\2\3\54\0\2\5\1\0\54\5\6\43"+
    "\1\0\50\43\14\0\1\13\55\0\1\44\1\13\47\0"+
    "\1\45\65\0\1\23\6\0\17\23\1\46\7\23\2\0"+
    "\1\23\16\0\1\23\6\0\27\23\2\0\1\23\16\0"+
    "\1\23\6\0\7\23\1\47\5\23\1\50\11\23\2\0"+
    "\1\23\16\0\1\23\6\0\10\23\1\51\4\23\1\52"+
    "\11\23\2\0\1\23\1\53\15\0\1\23\6\0\11\23"+
    "\1\54\2\23\1\55\7\23\1\56\2\23\2\0\1\23"+
    "\16\0\1\23\6\0\17\23\1\57\7\23\2\0\1\23"+
    "\16\0\1\23\6\0\10\23\1\60\16\23\2\0\1\23"+
    "\1\61\15\0\1\23\6\0\1\62\26\23\2\0\1\23"+
    "\16\0\1\23\6\0\1\63\3\23\1\64\3\23\1\65"+
    "\4\23\1\66\4\23\1\67\4\23\2\0\1\23\1\70"+
    "\15\0\1\23\6\0\17\23\1\71\7\23\2\0\1\23"+
    "\16\0\1\23\6\0\4\23\1\72\22\23\2\0\1\23"+
    "\16\0\1\23\6\0\22\23\1\73\4\23\2\0\1\23"+
    "\16\0\1\23\6\0\10\23\1\74\16\23\2\0\1\23"+
    "\1\75\15\0\1\23\6\0\1\76\26\23\2\0\1\23"+
    "\47\0\1\77\11\0\6\43\1\100\50\43\14\0\1\101"+
    "\42\0\5\45\1\102\51\45\14\0\1\23\6\0\17\23"+
    "\1\103\7\23\2\0\1\23\16\0\1\23\6\0\1\104"+
    "\26\23\2\0\1\23\16\0\1\23\6\0\12\23\1\105"+
    "\1\23\1\106\12\23\2\0\1\23\16\0\1\23\6\0"+
    "\23\23\1\107\3\23\2\0\1\23\16\0\1\23\6\0"+
    "\22\23\1\110\4\23\2\0\1\23\50\0\1\111\24\0"+
    "\1\23\6\0\4\23\1\112\22\23\2\0\1\23\16\0"+
    "\1\23\6\0\3\23\1\113\23\23\2\0\1\23\16\0"+
    "\1\23\6\0\4\23\1\114\22\23\2\0\1\23\16\0"+
    "\1\23\6\0\1\115\26\23\2\0\1\23\16\0\1\23"+
    "\6\0\20\23\1\116\6\23\2\0\1\23\1\0\1\117"+
    "\43\0\1\117\12\0\1\117\14\0\1\23\6\0\1\23"+
    "\1\120\25\23\2\0\1\23\16\0\1\23\6\0\24\23"+
    "\1\121\2\23\2\0\1\23\16\0\1\23\6\0\3\23"+
    "\1\122\23\23\2\0\1\23\16\0\1\23\6\0\14\23"+
    "\1\123\12\23\2\0\1\23\16\0\1\23\6\0\3\23"+
    "\1\124\23\23\2\0\1\23\16\0\1\23\6\0\12\23"+
    "\1\125\14\23\2\0\1\23\41\0\1\126\33\0\1\23"+
    "\6\0\10\23\1\127\4\23\1\130\11\23\2\0\1\23"+
    "\1\131\15\0\1\23\6\0\20\23\1\132\6\23\2\0"+
    "\1\23\1\0\1\133\14\0\1\23\6\0\13\23\1\134"+
    "\13\23\2\0\1\23\16\0\1\23\6\0\21\23\1\135"+
    "\5\23\2\0\1\23\46\0\1\136\26\0\1\23\6\0"+
    "\12\23\1\137\4\23\1\140\7\23\2\0\1\23\40\0"+
    "\1\141\41\0\1\142\51\0\1\23\6\0\17\23\1\143"+
    "\7\23\2\0\1\23\16\0\1\23\6\0\22\23\1\144"+
    "\4\23\2\0\1\23\16\0\1\23\6\0\20\23\1\145"+
    "\6\23\2\0\1\23\1\0\1\146\14\0\1\23\6\0"+
    "\1\23\1\147\25\23\2\0\1\23\16\0\1\23\6\0"+
    "\24\23\1\150\1\151\1\23\2\0\1\23\16\0\1\23"+
    "\6\0\2\23\1\152\24\23\2\0\1\23\16\0\1\23"+
    "\6\0\16\23\1\153\10\23\2\0\1\23\16\0\1\23"+
    "\6\0\21\23\1\154\5\23\2\0\1\23\46\0\1\155"+
    "\26\0\1\23\6\0\4\23\1\156\22\23\2\0\1\23"+
    "\16\0\1\23\6\0\10\23\1\157\16\23\2\0\1\23"+
    "\1\160\15\0\1\23\6\0\1\161\26\23\2\0\1\23"+
    "\16\0\1\23\6\0\14\23\1\162\12\23\2\0\1\23"+
    "\16\0\1\23\6\0\6\23\1\163\20\23\2\0\1\23"+
    "\41\0\1\164\33\0\1\23\6\0\22\23\1\165\4\23"+
    "\2\0\1\23\47\0\1\166\25\0\1\23\6\0\22\23"+
    "\1\167\4\23\2\0\1\23\16\0\1\23\6\0\10\23"+
    "\1\170\16\23\2\0\1\23\1\171\15\0\1\23\6\0"+
    "\27\23\1\172\1\0\1\23\16\0\1\23\6\0\13\23"+
    "\1\173\13\23\2\0\1\23\16\0\1\23\6\0\15\23"+
    "\1\174\11\23\2\0\1\23\42\0\1\175\32\0\1\23"+
    "\6\0\12\23\1\176\14\23\2\0\1\23\16\0\1\23"+
    "\6\0\7\23\1\177\17\23\2\0\1\23\16\0\1\23"+
    "\6\0\15\23\1\200\11\23\2\0\1\23\42\0\1\201"+
    "\32\0\1\23\6\0\12\23\1\202\14\23\2\0\1\23"+
    "\16\0\1\23\6\0\1\203\26\23\2\0\1\23\25\0"+
    "\1\204\47\0\1\23\6\0\21\23\1\205\5\23\2\0"+
    "\1\23\16\0\1\23\6\0\17\23\1\206\7\23\2\0"+
    "\1\23\46\0\1\207\26\0\1\23\6\0\12\23\1\210"+
    "\14\23\2\0\1\23\37\0\1\211\35\0\1\23\6\0"+
    "\4\23\1\212\22\23\2\0\1\23\16\0\1\23\6\0"+
    "\1\213\26\23\2\0\1\23\25\0\1\214\106\0\1\215"+
    "\17\0\1\23\6\0\14\23\1\216\12\23\2\0\1\23"+
    "\16\0\1\23\6\0\12\23\1\217\14\23\2\0\1\23"+
    "\37\0\1\220\35\0\1\23\6\0\4\23\1\221\22\23"+
    "\2\0\1\23\16\0\1\23\6\0\1\23\1\222\10\23"+
    "\1\223\3\23\1\224\10\23\2\0\1\23\16\0\1\23"+
    "\6\0\6\23\1\225\20\23\2\0\1\23\33\0\1\226"+
    "\41\0\1\23\6\0\14\23\1\227\12\23\2\0\1\23"+
    "\41\0\1\230\33\0\1\23\6\0\1\231\26\23\2\0"+
    "\1\23\16\0\1\23\6\0\15\23\1\232\11\23\2\0"+
    "\1\23\42\0\1\233\32\0\1\23\6\0\20\23\1\234"+
    "\6\23\2\0\1\23\1\0\1\235\14\0\1\23\6\0"+
    "\14\23\1\236\12\23\2\0\1\23\41\0\1\237\33\0"+
    "\1\23\6\0\4\23\1\240\22\23\2\0\1\23\31\0"+
    "\1\241\43\0\1\23\6\0\1\242\26\23\2\0\1\23"+
    "\16\0\1\23\6\0\10\23\1\243\16\23\2\0\1\23"+
    "\1\244\15\0\1\23\6\0\10\23\1\245\16\23\2\0"+
    "\1\23\1\246\15\0\1\23\6\0\17\23\1\247\7\23"+
    "\2\0\1\23\44\0\1\250\30\0\1\23\6\0\1\251"+
    "\26\23\2\0\1\23\25\0\1\252\47\0\1\23\6\0"+
    "\13\23\1\253\13\23\2\0\1\23\16\0\1\23\6\0"+
    "\24\23\1\254\1\255\1\23\2\0\1\23\51\0\1\256"+
    "\1\257\22\0\1\23\6\0\26\23\1\260\2\0\1\23"+
    "\53\0\1\261\21\0\1\23\6\0\17\23\1\262\7\23"+
    "\2\0\1\23\16\0\1\23\6\0\14\23\1\263\12\23"+
    "\2\0\1\23\41\0\1\264\33\0\1\23\6\0\4\23"+
    "\1\265\22\23\2\0\1\23\31\0\1\266\43\0\1\23"+
    "\6\0\1\267\26\23\2\0\1\23\25\0\1\270\47\0"+
    "\1\23\6\0\1\271\26\23\2\0\1\23\25\0\1\272"+
    "\47\0\1\23\6\0\4\23\1\273\22\23\2\0\1\23"+
    "\31\0\1\274\43\0\1\23\6\0\13\23\1\275\13\23"+
    "\2\0\1\23\40\0\1\276\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6298];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\3\11\2\1\2\11"+
    "\1\1\3\11\16\1\2\11\1\1\3\0\5\1\1\0"+
    "\5\1\1\0\6\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\6\1\1\11\5\1\1\0\6\1"+
    "\1\11\2\1\1\0\1\1\1\11\2\1\1\0\2\1"+
    "\2\11\3\1\1\0\6\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\1\0\3\1"+
    "\1\0\5\1\1\11\1\1\1\0\2\1\1\0\1\11"+
    "\2\1\1\0\5\1\1\0\1\1\1\0\4\1\1\11"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\3\1\2\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1; 
    yycolumn=1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error lexico: "+ yytext() + " Linea: " + yyline+ " Columna: "+yycolumn);
            }
          // fall through
          case 52: break;
          case 2:
            { 
            }
          // fall through
          case 53: break;
          case 3:
            { /*Espacios, se ignoran*/
            }
          // fall through
          case 54: break;
          case 4:
            { System.out.println("Cometario ignorado: "+ yytext());
            }
          // fall through
          case 55: break;
          case 5:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("PARENTESIS_IZQ", yytext(), yyline, yycolumn)); return new Symbol(sym.PARENTESIS_IZQ,yyline,yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 6:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("PARENTESIS_DER", yytext(), yyline, yycolumn)); return new Symbol(sym.PARENTESIS_DER,yyline,yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 7:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("COMA", yytext(), yyline, yycolumn)); return new Symbol(sym.COMA,yyline,yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 8:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("GUION", yytext(), yyline, yycolumn)); return new Symbol(sym.GUION,yyline,yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 9:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("DECIMAL", yytext(), yyline, yycolumn)); return new Symbol(sym.DECIMAL,yyline,yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 10:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("DOS_PUNTOS", yytext(), yyline, yycolumn)); return new Symbol(sym.DOS_PUNTOS,yyline,yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 11:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("PUNTO_COMA", yytext(), yyline, yycolumn)); return new Symbol(sym.PUNTO_COMA,yyline,yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 12:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MENOR", yytext(), yyline, yycolumn)); return new Symbol(sym.MENOR,yyline,yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 13:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("IGUAL", yytext(), yyline, yycolumn)); return new Symbol(sym.IGUAL,yyline,yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 14:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MAYOR", yytext(), yyline, yycolumn)); return new Symbol(sym.MAYOR,yyline,yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 15:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("ARROBA", yytext(), yyline, yycolumn)); return new Symbol(sym.ARROBA,yyline,yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 16:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("IDENTIFICADOR", yytext(), yyline, yycolumn)); return new Symbol(sym.IDENTIFICADOR,yyline,yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 17:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("CORCHETE_IZQ", yytext(), yyline, yycolumn)); return new Symbol(sym.CORCHETE_IZQ,yyline,yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 18:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("CORCHETE_DER", yytext(), yyline, yycolumn)); return new Symbol(sym.CORCHETE_DER,yyline,yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 19:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("CADENA", yytext(), yyline, yycolumn)); return new Symbol(sym.CADENA,yyline,yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 20:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("ARR", yytext(), yyline, yycolumn)); return new Symbol(sym.ARR,yyline,yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 21:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("DIV", yytext(), yyline, yycolumn)); return new Symbol(sym.DIV,yyline,yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 22:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("END", yytext(), yyline, yycolumn)); return new Symbol(sym.END,yyline,yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 23:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MAX", yytext(), yyline, yycolumn)); return new Symbol(sym.MAX,yyline,yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 24:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MIN", yytext(), yyline, yycolumn)); return new Symbol(sym.MIN,yyline,yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 25:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MOD", yytext(), yyline, yycolumn)); return new Symbol(sym.MOD,yyline,yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 26:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MULT", yytext(), yyline, yycolumn)); return new Symbol(sym.MULT,yyline,yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 27:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("RES", yytext(), yyline, yycolumn)); return new Symbol(sym.RES,yyline,yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 28:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("SUM", yytext(), yyline, yycolumn)); return new Symbol(sym.SUM,yyline,yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 29:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("VAR", yytext(), yyline, yycolumn)); return new Symbol(sym.VAR,yyline,yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 30:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("EJEX", yytext(), yyline, yycolumn)); return new Symbol(sym.EJEX,yyline,yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 31:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("EJEY", yytext(), yyline, yycolumn)); return new Symbol(sym.EJEY,yyline,yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 32:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("EXEC", yytext(), yyline, yycolumn)); return new Symbol(sym.EXEC,yyline,yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 33:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MODA", yytext(), yyline, yycolumn)); return new Symbol(sym.MODA,yyline,yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 34:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("LABEL", yytext(), yyline, yycolumn)); return new Symbol(sym.LABEL,yyline,yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 35:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MEDIA", yytext(), yyline, yycolumn)); return new Symbol(sym.MEDIA,yyline,yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 36:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("PRINT", yytext(), yyline, yycolumn)); return new Symbol(sym.PRINT,yyline,yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 37:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("CHAR", yytext(), yyline, yycolumn)); return new Symbol(sym.CHAR,yyline,yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 38:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("COLUMN", yytext(), yyline, yycolumn)); return new Symbol(sym.COLUMN,yyline,yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 39:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("DOUBLE", yytext(), yyline, yycolumn)); return new Symbol(sym.DOUBLE,yyline,yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 40:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("TITULO", yytext(), yyline, yycolumn)); return new Symbol(sym.TITULO,yyline,yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 41:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("VALUES", yytext(), yyline, yycolumn)); return new Symbol(sym.VALUES,yyline,yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 42:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("CONSOLE", yytext(), yyline, yycolumn)); return new Symbol(sym.CONSOLE,yyline,yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 43:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("MEDIANA", yytext(), yyline, yycolumn)); return new Symbol(sym.MEDIANA,yyline,yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 44:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("PROGRAM", yytext(), yyline, yycolumn)); return new Symbol(sym.PROGRAM,yyline,yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 45:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("TITULOX", yytext(), yyline, yycolumn)); return new Symbol(sym.TITULOX,yyline,yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 46:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("TITULOY", yytext(), yyline, yycolumn)); return new Symbol(sym.TITULOY,yyline,yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 47:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("GRAPHBAR", yytext(), yyline, yycolumn)); return new Symbol(sym.GRAPHBAR,yyline,yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 48:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("GRAPHPIE", yytext(), yyline, yycolumn)); return new Symbol(sym.GRAPHPIE,yyline,yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 49:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("VARIANZA", yytext(), yyline, yycolumn)); return new Symbol(sym.VARIANZA,yyline,yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 50:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("GRAPHLINE", yytext(), yyline, yycolumn)); return new Symbol(sym.GRAPHLINE,yyline,yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 51:
            { System.out.println("Reconocido: "+ yytext()); Principal.listaTokens.add(new Token("HISTOGRAM", yytext(), yyline, yycolumn)); return new Symbol(sym.HISTOGRAM,yyline,yycolumn, yytext());
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
