/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import Analizadores.Analizador_Lexico;
import Analizadores.Parser;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import main.Arreglos;
import main.ErroresLexicos;
import main.ErroresSintacticos;
import main.TablaSimbolos;
import main.Token;
import main.Variable;

/**
 *
 * @author Fernando
 */
public class Codigo extends javax.swing.JInternalFrame {
    
    ArrayList<ErroresLexicos> lexicos = new ArrayList<>();
    ArrayList<ErroresSintacticos> sintacticos = new ArrayList<>();
    ArrayList<Variable> variables = new ArrayList<>();
    ArrayList<Arreglos> arreglos = new ArrayList<>();
    ArrayList<Token> tokens = new ArrayList<>();

    /**
     * Creates new form Codigo
     */
    public Codigo(Principal principal) {
        initComponents();
        this.principal = principal;
    }
    
    String filePath;
    Principal principal;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEntradaCodigo = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnGuardar = new javax.swing.JMenuItem();
        btnCerrar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        btnEjecutar = new javax.swing.JMenuItem();
        btnTokens = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        btnErrores = new javax.swing.JMenuItem();
        btnReporteTablas = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setClosable(true);
        setIconifiable(true);
        setTitle("Editor de codigo");

        txtEntradaCodigo.setColumns(20);
        txtEntradaCodigo.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        txtEntradaCodigo.setRows(5);
        jScrollPane1.setViewportView(txtEntradaCodigo);

        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(btnGuardar);

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jMenu1.add(btnCerrar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Herramientas");

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jMenu2.add(btnEjecutar);

        jMenuBar1.add(jMenu2);

        btnTokens.setText("Reportes");

        jMenuItem2.setText("Reporte tokens");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        btnTokens.add(jMenuItem2);

        btnErrores.setText("Reporte errores");
        btnErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErroresActionPerformed(evt);
            }
        });
        btnTokens.add(btnErrores);

        btnReporteTablas.setText("Reporte tabla de simbolos");
        btnReporteTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteTablasActionPerformed(evt);
            }
        });
        btnTokens.add(btnReporteTablas);

        jMenuBar1.add(btnTokens);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.saveFile();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        Principal.listaTokens.clear();
        Principal.txtConsola.setText("");
        this.arreglos.clear();
        this.tokens.clear();
        this.lexicos.clear();
        this.sintacticos.clear();
        this.variables.clear();
        
        try {
            String text = this.txtEntradaCodigo.getText();
            System.out.println(text);
            Analizador_Lexico scanner = new Analizador_Lexico(new BufferedReader(new StringReader(text)));
            this.tokens = scanner.listaTokens;
            this.lexicos = scanner.listaErrores;
            
            Parser parser = new Parser(scanner);
            parser.parse();
            this.sintacticos = parser.erroresSintacticos;
            this.variables = parser.tablaSimbolos.obtenerVariables();
            this.arreglos = parser.tablaArreglos.obtenerArreglos();
            
            
            if (!this.lexicos.isEmpty() || !this.sintacticos.isEmpty()){
                JOptionPane.showMessageDialog(null, "Se encontraron errores durante el analisis, genere el reporte.");
            }

        } catch (Exception e) {
          //  System.out.println(e);
          e.printStackTrace();
        }
        
        
     
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            //Table tokens
            String tablaTokens = this.tablaToknes(this.tokens);
            FileWriter writer = new FileWriter("Tokens.html");
            writer.write(tablaTokens);
            writer.close();
            System.out.println("Tabla HTML generada con éxito.");
            Runtime.getRuntime().exec("cmd /c start " + "Tokens.html");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void btnErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnErroresActionPerformed
        try {
            //Table tokens
            String tablaErrores = this.tablaErrores(this.lexicos, this.sintacticos);
            FileWriter writer = new FileWriter("Errores.html");
            writer.write(tablaErrores);
            writer.close();
            System.out.println("Tabla HTML generada con éxito.");
            Runtime.getRuntime().exec("cmd /c start " + "Errores.html");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnErroresActionPerformed

    private void btnReporteTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteTablasActionPerformed
        try {
            //Table tokens
            String tablaSimbolos = this.tablaSimbolos(this.variables, this.arreglos);
            FileWriter writer = new FileWriter("Tabladesimbolos.html");
            writer.write(tablaSimbolos);
            writer.close();
            System.out.println("Tabla HTML generada con éxito.");
            Runtime.getRuntime().exec("cmd /c start " + "Tabladesimbolos.html");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnReporteTablasActionPerformed

    public void agregarCodigoTextArea(String codigo, String filePath){
        
        this.txtEntradaCodigo.append(codigo);
        this.filePath = filePath;
        this.setTitle(filePath);
    
    }
    
    public void saveFile() {
        if (this.filePath != null) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                writer.write(txtEntradaCodigo.getText());
                JOptionPane.showMessageDialog(null, "Archivo guardado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay un archivo abierto para guardar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public String tablaToknes(ArrayList<Token> tokens) {
        StringBuilder htmlTable = new StringBuilder();
        htmlTable.append("<html>");
        htmlTable.append("<head>");
        htmlTable.append("<title>Tabla de Tokens</title>");
        htmlTable.append("<style> table { width: 100%; border-collapse: collapse; border: 1px solid #dddddd; font-family: Arial, sans-serif; } th, td { border: 1px solid #dddddd; padding: 8px; } th { background-color: #f2f2f2; text-align: left; } tr:nth-child(even) { background-color: #f9f9f9; } h2 { font-family: Arial, sans-serif; color: #333333; } body { margin: 20px; } </style>");
        htmlTable.append("</head>");
        htmlTable.append("<body>");
        htmlTable.append("<h2>Tabla de Tokens</h2>");
        htmlTable.append("<table border=\"1\">");
        htmlTable.append("<tr><th>Tipo</th><th>Lexema</th><th>Fila</th><th>Columna</th></tr>");
        
        for (Token row : tokens) {
            htmlTable.append("<tr>");

                htmlTable.append("<td>").append(row.getTipo()).append("</td>");
                htmlTable.append("<td>").append(row.getLexema()).append("</td>");
                htmlTable.append("<td>").append(row.getFila()).append("</td>");
                htmlTable.append("<td>").append(row.getColumna()).append("</td>");
                
            htmlTable.append("</tr>");
        }
       
        
        htmlTable.append("</table>");
        htmlTable.append("</body>");
        htmlTable.append("</html>");
        
        return htmlTable.toString();
    }
    
    public String tablaErrores(ArrayList<ErroresLexicos> lexicos, ArrayList<ErroresSintacticos> sintacticos) {
        StringBuilder htmlTable = new StringBuilder();
        htmlTable.append("<html>");
        htmlTable.append("<head>");
        htmlTable.append("<title>Tabla de Errores</title>");
        htmlTable.append("<style> table { width: 100%; border-collapse: collapse; border: 1px solid #dddddd; font-family: Arial, sans-serif; } th, td { border: 1px solid #dddddd; padding: 8px; } th { background-color: #f2f2f2; text-align: left; } tr:nth-child(even) { background-color: #f9f9f9; } h2 { font-family: Arial, sans-serif; color: #333333; } body { margin: 20px; } </style>");
        htmlTable.append("</head>");
        htmlTable.append("<body>");
        htmlTable.append("<h2>Tabla de Errores</h2>");
        htmlTable.append("<table border=\"1\">");
        htmlTable.append("<tr><th>Tipo</th><th>Error</th><th>Fila</th><th>Columna</th></tr>");
        
        for (ErroresLexicos row : lexicos) {
            htmlTable.append("<tr>");

                htmlTable.append("<td>").append(row.getTipo()).append("</td>");
                htmlTable.append("<td>").append(row.getCaracter()).append("</td>");
                htmlTable.append("<td>").append(row.getFila()).append("</td>");
                htmlTable.append("<td>").append(row.getColumna()).append("</td>");
                
            htmlTable.append("</tr>");
        }
        
        for (ErroresSintacticos row : sintacticos) {
            htmlTable.append("<tr>");

                htmlTable.append("<td>").append(row.getTipo()).append("</td>");
                htmlTable.append("<td>").append(row.getToken()).append("</td>");
                htmlTable.append("<td>").append(row.getFila()).append("</td>");
                htmlTable.append("<td>").append(row.getColumna()).append("</td>");
                
            htmlTable.append("</tr>");
        }
        
        htmlTable.append("</table>");
        htmlTable.append("</body>");
        htmlTable.append("</html>");
        
        return htmlTable.toString();
    }
    
    public String tablaSimbolos(ArrayList<Variable> variables, ArrayList<Arreglos> arreglos) {
        StringBuilder htmlTable = new StringBuilder();
        htmlTable.append("<html>");
        htmlTable.append("<head>");
        htmlTable.append("<title>Tabla de simbolos</title>");
        htmlTable.append("<style> table { width: 100%; border-collapse: collapse; border: 1px solid #dddddd; font-family: Arial, sans-serif; } th, td { border: 1px solid #dddddd; padding: 8px; } th { background-color: #f2f2f2; text-align: left; } tr:nth-child(even) { background-color: #f9f9f9; } h2 { font-family: Arial, sans-serif; color: #333333; } body { margin: 20px; } </style>");
        htmlTable.append("</head>");
        htmlTable.append("<body>");
        htmlTable.append("<h2>Tabla de simbolos</h2>");
        htmlTable.append("<table border=\"1\">");
        htmlTable.append("<tr><th>#</th><th>Nombre</th><th>Tipo</th><th>Valor</th></tr>");
        
        int i = 1;
        
        for (Variable row : variables) {
            htmlTable.append("<tr>");
            
                htmlTable.append("<td>").append(i).append("</td>");
                htmlTable.append("<td>").append(row.getNombre()).append("</td>");
                htmlTable.append("<td>").append(row.getTipo()).append("</td>");
                htmlTable.append("<td>").append(row.getValor()).append("</td>");
                i++;
            htmlTable.append("</tr>");
        }
        
        for (Arreglos row : arreglos) {
            htmlTable.append("<tr>");
            String valores_str = "";
            for(Object objeto : row.obtenerValores()){
        
            valores_str = valores_str + objeto.toString() + ", ";
        }
            
                htmlTable.append("<td>").append(i).append("</td>");
                htmlTable.append("<td>").append(row.getNombre()).append("</td>");
                htmlTable.append("<td>").append(row.getTipo()).append("</td>");
                htmlTable.append("<td>").append(valores_str).append("</td>");
                i++;
            htmlTable.append("</tr>");
        }
        
        htmlTable.append("</table>");
        htmlTable.append("</body>");
        htmlTable.append("</html>");
        
        return htmlTable.toString();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnCerrar;
    private javax.swing.JMenuItem btnEjecutar;
    private javax.swing.JMenuItem btnErrores;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JMenuItem btnReporteTablas;
    private javax.swing.JMenu btnTokens;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtEntradaCodigo;
    // End of variables declaration//GEN-END:variables
}
